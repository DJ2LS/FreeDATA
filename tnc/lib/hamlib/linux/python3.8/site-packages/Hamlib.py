# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Hamlib
else:
    import _Hamlib

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = f"proxy of {self.this.__repr__()}"
    except __builtin__.Exception:
        strthis = ""
    return f"<{self.__class__.__module__}.{self.__class__.__name__}; {strthis} >"


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError(f"You cannot add instance attributes to {self}")
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError(f"You cannot add class attributes to {cls}")
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


MAX_MODELS_PER_BACKEND = _Hamlib.MAX_MODELS_PER_BACKEND
RIG_MODEL_NONE = _Hamlib.RIG_MODEL_NONE
RIG_MODEL_DUMMY = _Hamlib.RIG_MODEL_DUMMY
RIG_MODEL_NETRIGCTL = _Hamlib.RIG_MODEL_NETRIGCTL
RIG_MODEL_ARMSTRONG = _Hamlib.RIG_MODEL_ARMSTRONG
RIG_MODEL_FLRIG = _Hamlib.RIG_MODEL_FLRIG
RIG_MODEL_TRXMANAGER_RIG = _Hamlib.RIG_MODEL_TRXMANAGER_RIG
RIG_MODEL_DUMMY_NOVFO = _Hamlib.RIG_MODEL_DUMMY_NOVFO
RIG_MODEL_TCI1X = _Hamlib.RIG_MODEL_TCI1X
RIG_MODEL_FT847 = _Hamlib.RIG_MODEL_FT847
RIG_MODEL_FT1000 = _Hamlib.RIG_MODEL_FT1000
RIG_MODEL_FT1000D = _Hamlib.RIG_MODEL_FT1000D
RIG_MODEL_FT1000MPMKV = _Hamlib.RIG_MODEL_FT1000MPMKV
RIG_MODEL_FT747 = _Hamlib.RIG_MODEL_FT747
RIG_MODEL_FT757 = _Hamlib.RIG_MODEL_FT757
RIG_MODEL_FT757GXII = _Hamlib.RIG_MODEL_FT757GXII
RIG_MODEL_FT575 = _Hamlib.RIG_MODEL_FT575
RIG_MODEL_FT767 = _Hamlib.RIG_MODEL_FT767
RIG_MODEL_FT736R = _Hamlib.RIG_MODEL_FT736R
RIG_MODEL_FT840 = _Hamlib.RIG_MODEL_FT840
RIG_MODEL_FT820 = _Hamlib.RIG_MODEL_FT820
RIG_MODEL_FT900 = _Hamlib.RIG_MODEL_FT900
RIG_MODEL_FT920 = _Hamlib.RIG_MODEL_FT920
RIG_MODEL_FT890 = _Hamlib.RIG_MODEL_FT890
RIG_MODEL_FT990 = _Hamlib.RIG_MODEL_FT990
RIG_MODEL_FRG100 = _Hamlib.RIG_MODEL_FRG100
RIG_MODEL_FRG9600 = _Hamlib.RIG_MODEL_FRG9600
RIG_MODEL_FRG8800 = _Hamlib.RIG_MODEL_FRG8800
RIG_MODEL_FT817 = _Hamlib.RIG_MODEL_FT817
RIG_MODEL_FT100 = _Hamlib.RIG_MODEL_FT100
RIG_MODEL_FT857 = _Hamlib.RIG_MODEL_FT857
RIG_MODEL_FT897 = _Hamlib.RIG_MODEL_FT897
RIG_MODEL_FT1000MP = _Hamlib.RIG_MODEL_FT1000MP
RIG_MODEL_FT1000MPMKVFLD = _Hamlib.RIG_MODEL_FT1000MPMKVFLD
RIG_MODEL_VR5000 = _Hamlib.RIG_MODEL_VR5000
RIG_MODEL_FT450 = _Hamlib.RIG_MODEL_FT450
RIG_MODEL_FT950 = _Hamlib.RIG_MODEL_FT950
RIG_MODEL_FT2000 = _Hamlib.RIG_MODEL_FT2000
RIG_MODEL_FT9000 = _Hamlib.RIG_MODEL_FT9000
RIG_MODEL_FT980 = _Hamlib.RIG_MODEL_FT980
RIG_MODEL_FTDX5000 = _Hamlib.RIG_MODEL_FTDX5000
RIG_MODEL_VX1700 = _Hamlib.RIG_MODEL_VX1700
RIG_MODEL_FTDX1200 = _Hamlib.RIG_MODEL_FTDX1200
RIG_MODEL_FT991 = _Hamlib.RIG_MODEL_FT991
RIG_MODEL_FT891 = _Hamlib.RIG_MODEL_FT891
RIG_MODEL_FTDX3000 = _Hamlib.RIG_MODEL_FTDX3000
RIG_MODEL_FT847UNI = _Hamlib.RIG_MODEL_FT847UNI
RIG_MODEL_FT600 = _Hamlib.RIG_MODEL_FT600
RIG_MODEL_FTDX101D = _Hamlib.RIG_MODEL_FTDX101D
RIG_MODEL_FT818 = _Hamlib.RIG_MODEL_FT818
RIG_MODEL_FTDX10 = _Hamlib.RIG_MODEL_FTDX10
RIG_MODEL_FT897D = _Hamlib.RIG_MODEL_FT897D
RIG_MODEL_FTDX101MP = _Hamlib.RIG_MODEL_FTDX101MP
RIG_MODEL_MCHFQRP = _Hamlib.RIG_MODEL_MCHFQRP
RIG_MODEL_TS50 = _Hamlib.RIG_MODEL_TS50
RIG_MODEL_TS440 = _Hamlib.RIG_MODEL_TS440
RIG_MODEL_TS450S = _Hamlib.RIG_MODEL_TS450S
RIG_MODEL_TS570D = _Hamlib.RIG_MODEL_TS570D
RIG_MODEL_TS690S = _Hamlib.RIG_MODEL_TS690S
RIG_MODEL_TS711 = _Hamlib.RIG_MODEL_TS711
RIG_MODEL_TS790 = _Hamlib.RIG_MODEL_TS790
RIG_MODEL_TS811 = _Hamlib.RIG_MODEL_TS811
RIG_MODEL_TS850 = _Hamlib.RIG_MODEL_TS850
RIG_MODEL_TS870S = _Hamlib.RIG_MODEL_TS870S
RIG_MODEL_TS940 = _Hamlib.RIG_MODEL_TS940
RIG_MODEL_TS950S = _Hamlib.RIG_MODEL_TS950S
RIG_MODEL_TS950SDX = _Hamlib.RIG_MODEL_TS950SDX
RIG_MODEL_TS2000 = _Hamlib.RIG_MODEL_TS2000
RIG_MODEL_R5000 = _Hamlib.RIG_MODEL_R5000
RIG_MODEL_TS570S = _Hamlib.RIG_MODEL_TS570S
RIG_MODEL_THD7A = _Hamlib.RIG_MODEL_THD7A
RIG_MODEL_THD7AG = _Hamlib.RIG_MODEL_THD7AG
RIG_MODEL_THF6A = _Hamlib.RIG_MODEL_THF6A
RIG_MODEL_THF7E = _Hamlib.RIG_MODEL_THF7E
RIG_MODEL_K2 = _Hamlib.RIG_MODEL_K2
RIG_MODEL_TS930 = _Hamlib.RIG_MODEL_TS930
RIG_MODEL_THG71 = _Hamlib.RIG_MODEL_THG71
RIG_MODEL_TS680S = _Hamlib.RIG_MODEL_TS680S
RIG_MODEL_TS140S = _Hamlib.RIG_MODEL_TS140S
RIG_MODEL_TMD700 = _Hamlib.RIG_MODEL_TMD700
RIG_MODEL_TMV7 = _Hamlib.RIG_MODEL_TMV7
RIG_MODEL_TS480 = _Hamlib.RIG_MODEL_TS480
RIG_MODEL_K3 = _Hamlib.RIG_MODEL_K3
RIG_MODEL_TRC80 = _Hamlib.RIG_MODEL_TRC80
RIG_MODEL_TS590S = _Hamlib.RIG_MODEL_TS590S
RIG_MODEL_TRANSFOX = _Hamlib.RIG_MODEL_TRANSFOX
RIG_MODEL_THD72A = _Hamlib.RIG_MODEL_THD72A
RIG_MODEL_TMD710 = _Hamlib.RIG_MODEL_TMD710
RIG_MODEL_TMV71 = _Hamlib.RIG_MODEL_TMV71
RIG_MODEL_F6K = _Hamlib.RIG_MODEL_F6K
RIG_MODEL_TS590SG = _Hamlib.RIG_MODEL_TS590SG
RIG_MODEL_XG3 = _Hamlib.RIG_MODEL_XG3
RIG_MODEL_TS990S = _Hamlib.RIG_MODEL_TS990S
RIG_MODEL_HPSDR = _Hamlib.RIG_MODEL_HPSDR
RIG_MODEL_TS890S = _Hamlib.RIG_MODEL_TS890S
RIG_MODEL_THD74 = _Hamlib.RIG_MODEL_THD74
RIG_MODEL_K3S = _Hamlib.RIG_MODEL_K3S
RIG_MODEL_KX2 = _Hamlib.RIG_MODEL_KX2
RIG_MODEL_KX3 = _Hamlib.RIG_MODEL_KX3
RIG_MODEL_PT8000A = _Hamlib.RIG_MODEL_PT8000A
RIG_MODEL_K4 = _Hamlib.RIG_MODEL_K4
RIG_MODEL_POWERSDR = _Hamlib.RIG_MODEL_POWERSDR
RIG_MODEL_MALACHITE = _Hamlib.RIG_MODEL_MALACHITE
RIG_MODEL_IC1271 = _Hamlib.RIG_MODEL_IC1271
RIG_MODEL_IC1275 = _Hamlib.RIG_MODEL_IC1275
RIG_MODEL_IC271 = _Hamlib.RIG_MODEL_IC271
RIG_MODEL_IC275 = _Hamlib.RIG_MODEL_IC275
RIG_MODEL_IC375 = _Hamlib.RIG_MODEL_IC375
RIG_MODEL_IC471 = _Hamlib.RIG_MODEL_IC471
RIG_MODEL_IC475 = _Hamlib.RIG_MODEL_IC475
RIG_MODEL_IC575 = _Hamlib.RIG_MODEL_IC575
RIG_MODEL_IC706 = _Hamlib.RIG_MODEL_IC706
RIG_MODEL_IC706MKII = _Hamlib.RIG_MODEL_IC706MKII
RIG_MODEL_IC706MKIIG = _Hamlib.RIG_MODEL_IC706MKIIG
RIG_MODEL_IC707 = _Hamlib.RIG_MODEL_IC707
RIG_MODEL_IC718 = _Hamlib.RIG_MODEL_IC718
RIG_MODEL_IC725 = _Hamlib.RIG_MODEL_IC725
RIG_MODEL_IC726 = _Hamlib.RIG_MODEL_IC726
RIG_MODEL_IC728 = _Hamlib.RIG_MODEL_IC728
RIG_MODEL_IC729 = _Hamlib.RIG_MODEL_IC729
RIG_MODEL_IC731 = _Hamlib.RIG_MODEL_IC731
RIG_MODEL_IC735 = _Hamlib.RIG_MODEL_IC735
RIG_MODEL_IC736 = _Hamlib.RIG_MODEL_IC736
RIG_MODEL_IC737 = _Hamlib.RIG_MODEL_IC737
RIG_MODEL_IC738 = _Hamlib.RIG_MODEL_IC738
RIG_MODEL_IC746 = _Hamlib.RIG_MODEL_IC746
RIG_MODEL_IC751 = _Hamlib.RIG_MODEL_IC751
RIG_MODEL_IC751A = _Hamlib.RIG_MODEL_IC751A
RIG_MODEL_IC756 = _Hamlib.RIG_MODEL_IC756
RIG_MODEL_IC756PRO = _Hamlib.RIG_MODEL_IC756PRO
RIG_MODEL_IC761 = _Hamlib.RIG_MODEL_IC761
RIG_MODEL_IC765 = _Hamlib.RIG_MODEL_IC765
RIG_MODEL_IC775 = _Hamlib.RIG_MODEL_IC775
RIG_MODEL_IC781 = _Hamlib.RIG_MODEL_IC781
RIG_MODEL_IC820 = _Hamlib.RIG_MODEL_IC820
RIG_MODEL_IC821H = _Hamlib.RIG_MODEL_IC821H
RIG_MODEL_IC970 = _Hamlib.RIG_MODEL_IC970
RIG_MODEL_ICR10 = _Hamlib.RIG_MODEL_ICR10
RIG_MODEL_ICR71 = _Hamlib.RIG_MODEL_ICR71
RIG_MODEL_ICR72 = _Hamlib.RIG_MODEL_ICR72
RIG_MODEL_ICR75 = _Hamlib.RIG_MODEL_ICR75
RIG_MODEL_ICR7000 = _Hamlib.RIG_MODEL_ICR7000
RIG_MODEL_ICR7100 = _Hamlib.RIG_MODEL_ICR7100
RIG_MODEL_ICR8500 = _Hamlib.RIG_MODEL_ICR8500
RIG_MODEL_ICR9000 = _Hamlib.RIG_MODEL_ICR9000
RIG_MODEL_IC910 = _Hamlib.RIG_MODEL_IC910
RIG_MODEL_IC78 = _Hamlib.RIG_MODEL_IC78
RIG_MODEL_IC746PRO = _Hamlib.RIG_MODEL_IC746PRO
RIG_MODEL_IC756PROII = _Hamlib.RIG_MODEL_IC756PROII
RIG_MODEL_ICID1 = _Hamlib.RIG_MODEL_ICID1
RIG_MODEL_IC703 = _Hamlib.RIG_MODEL_IC703
RIG_MODEL_IC7800 = _Hamlib.RIG_MODEL_IC7800
RIG_MODEL_IC756PROIII = _Hamlib.RIG_MODEL_IC756PROIII
RIG_MODEL_ICR20 = _Hamlib.RIG_MODEL_ICR20
RIG_MODEL_IC7000 = _Hamlib.RIG_MODEL_IC7000
RIG_MODEL_IC7200 = _Hamlib.RIG_MODEL_IC7200
RIG_MODEL_IC7700 = _Hamlib.RIG_MODEL_IC7700
RIG_MODEL_IC7600 = _Hamlib.RIG_MODEL_IC7600
RIG_MODEL_IC92D = _Hamlib.RIG_MODEL_IC92D
RIG_MODEL_ICR9500 = _Hamlib.RIG_MODEL_ICR9500
RIG_MODEL_IC7410 = _Hamlib.RIG_MODEL_IC7410
RIG_MODEL_IC9100 = _Hamlib.RIG_MODEL_IC9100
RIG_MODEL_ICRX7 = _Hamlib.RIG_MODEL_ICRX7
RIG_MODEL_IC7100 = _Hamlib.RIG_MODEL_IC7100
RIG_MODEL_ID5100 = _Hamlib.RIG_MODEL_ID5100
RIG_MODEL_IC2730 = _Hamlib.RIG_MODEL_IC2730
RIG_MODEL_IC7300 = _Hamlib.RIG_MODEL_IC7300
RIG_MODEL_PERSEUS = _Hamlib.RIG_MODEL_PERSEUS
RIG_MODEL_IC785x = _Hamlib.RIG_MODEL_IC785x
RIG_MODEL_X108G = _Hamlib.RIG_MODEL_X108G
RIG_MODEL_ICR6 = _Hamlib.RIG_MODEL_ICR6
RIG_MODEL_IC7610 = _Hamlib.RIG_MODEL_IC7610
RIG_MODEL_ICR8600 = _Hamlib.RIG_MODEL_ICR8600
RIG_MODEL_ICR30 = _Hamlib.RIG_MODEL_ICR30
RIG_MODEL_IC9700 = _Hamlib.RIG_MODEL_IC9700
RIG_MODEL_ID4100 = _Hamlib.RIG_MODEL_ID4100
RIG_MODEL_ID31 = _Hamlib.RIG_MODEL_ID31
RIG_MODEL_ID51 = _Hamlib.RIG_MODEL_ID51
RIG_MODEL_IC705 = _Hamlib.RIG_MODEL_IC705
RIG_MODEL_MINISCOUT = _Hamlib.RIG_MODEL_MINISCOUT
RIG_MODEL_XPLORER = _Hamlib.RIG_MODEL_XPLORER
RIG_MODEL_OS535 = _Hamlib.RIG_MODEL_OS535
RIG_MODEL_OS456 = _Hamlib.RIG_MODEL_OS456
RIG_MODEL_OMNIVI = _Hamlib.RIG_MODEL_OMNIVI
RIG_MODEL_OMNIVIP = _Hamlib.RIG_MODEL_OMNIVIP
RIG_MODEL_PARAGON2 = _Hamlib.RIG_MODEL_PARAGON2
RIG_MODEL_DELTAII = _Hamlib.RIG_MODEL_DELTAII
RIG_MODEL_PCR1000 = _Hamlib.RIG_MODEL_PCR1000
RIG_MODEL_PCR100 = _Hamlib.RIG_MODEL_PCR100
RIG_MODEL_PCR1500 = _Hamlib.RIG_MODEL_PCR1500
RIG_MODEL_PCR2500 = _Hamlib.RIG_MODEL_PCR2500
RIG_MODEL_AR8200 = _Hamlib.RIG_MODEL_AR8200
RIG_MODEL_AR8000 = _Hamlib.RIG_MODEL_AR8000
RIG_MODEL_AR7030 = _Hamlib.RIG_MODEL_AR7030
RIG_MODEL_AR5000 = _Hamlib.RIG_MODEL_AR5000
RIG_MODEL_AR3030 = _Hamlib.RIG_MODEL_AR3030
RIG_MODEL_AR3000A = _Hamlib.RIG_MODEL_AR3000A
RIG_MODEL_AR3000 = _Hamlib.RIG_MODEL_AR3000
RIG_MODEL_AR2700 = _Hamlib.RIG_MODEL_AR2700
RIG_MODEL_AR2500 = _Hamlib.RIG_MODEL_AR2500
RIG_MODEL_AR16 = _Hamlib.RIG_MODEL_AR16
RIG_MODEL_SDU5500 = _Hamlib.RIG_MODEL_SDU5500
RIG_MODEL_SDU5000 = _Hamlib.RIG_MODEL_SDU5000
RIG_MODEL_AR8600 = _Hamlib.RIG_MODEL_AR8600
RIG_MODEL_AR5000A = _Hamlib.RIG_MODEL_AR5000A
RIG_MODEL_AR7030P = _Hamlib.RIG_MODEL_AR7030P
RIG_MODEL_SR2200 = _Hamlib.RIG_MODEL_SR2200
RIG_MODEL_JST145 = _Hamlib.RIG_MODEL_JST145
RIG_MODEL_JST245 = _Hamlib.RIG_MODEL_JST245
RIG_MODEL_CMH530 = _Hamlib.RIG_MODEL_CMH530
RIG_MODEL_NRD345 = _Hamlib.RIG_MODEL_NRD345
RIG_MODEL_NRD525 = _Hamlib.RIG_MODEL_NRD525
RIG_MODEL_NRD535 = _Hamlib.RIG_MODEL_NRD535
RIG_MODEL_NRD545 = _Hamlib.RIG_MODEL_NRD545
RIG_MODEL_RS64 = _Hamlib.RIG_MODEL_RS64
RIG_MODEL_RS2005 = _Hamlib.RIG_MODEL_RS2005
RIG_MODEL_RS2006 = _Hamlib.RIG_MODEL_RS2006
RIG_MODEL_RS2035 = _Hamlib.RIG_MODEL_RS2035
RIG_MODEL_RS2042 = _Hamlib.RIG_MODEL_RS2042
RIG_MODEL_RS2041 = _Hamlib.RIG_MODEL_RS2041
RIG_MODEL_BC780 = _Hamlib.RIG_MODEL_BC780
RIG_MODEL_BC245 = _Hamlib.RIG_MODEL_BC245
RIG_MODEL_BC895 = _Hamlib.RIG_MODEL_BC895
RIG_MODEL_PRO2052 = _Hamlib.RIG_MODEL_PRO2052
RIG_MODEL_BC235 = _Hamlib.RIG_MODEL_BC235
RIG_MODEL_BC250 = _Hamlib.RIG_MODEL_BC250
RIG_MODEL_BC785 = _Hamlib.RIG_MODEL_BC785
RIG_MODEL_BC786 = _Hamlib.RIG_MODEL_BC786
RIG_MODEL_BCT8 = _Hamlib.RIG_MODEL_BCT8
RIG_MODEL_BCD396T = _Hamlib.RIG_MODEL_BCD396T
RIG_MODEL_BCD996T = _Hamlib.RIG_MODEL_BCD996T
RIG_MODEL_BC898 = _Hamlib.RIG_MODEL_BC898
RIG_MODEL_DKR8 = _Hamlib.RIG_MODEL_DKR8
RIG_MODEL_DKR8A = _Hamlib.RIG_MODEL_DKR8A
RIG_MODEL_DKR8B = _Hamlib.RIG_MODEL_DKR8B
RIG_MODEL_HF150 = _Hamlib.RIG_MODEL_HF150
RIG_MODEL_HF225 = _Hamlib.RIG_MODEL_HF225
RIG_MODEL_HF250 = _Hamlib.RIG_MODEL_HF250
RIG_MODEL_HF235 = _Hamlib.RIG_MODEL_HF235
RIG_MODEL_RA3790 = _Hamlib.RIG_MODEL_RA3790
RIG_MODEL_RA3720 = _Hamlib.RIG_MODEL_RA3720
RIG_MODEL_RA6790 = _Hamlib.RIG_MODEL_RA6790
RIG_MODEL_RA3710 = _Hamlib.RIG_MODEL_RA3710
RIG_MODEL_RA3702 = _Hamlib.RIG_MODEL_RA3702
RIG_MODEL_HF1000 = _Hamlib.RIG_MODEL_HF1000
RIG_MODEL_HF1000A = _Hamlib.RIG_MODEL_HF1000A
RIG_MODEL_WJ8711 = _Hamlib.RIG_MODEL_WJ8711
RIG_MODEL_WJ8888 = _Hamlib.RIG_MODEL_WJ8888
RIG_MODEL_ESM500 = _Hamlib.RIG_MODEL_ESM500
RIG_MODEL_EK890 = _Hamlib.RIG_MODEL_EK890
RIG_MODEL_EK891 = _Hamlib.RIG_MODEL_EK891
RIG_MODEL_EK895 = _Hamlib.RIG_MODEL_EK895
RIG_MODEL_EK070 = _Hamlib.RIG_MODEL_EK070
RIG_MODEL_TRP7000 = _Hamlib.RIG_MODEL_TRP7000
RIG_MODEL_TRP8000 = _Hamlib.RIG_MODEL_TRP8000
RIG_MODEL_TRP9000 = _Hamlib.RIG_MODEL_TRP9000
RIG_MODEL_TRP8255 = _Hamlib.RIG_MODEL_TRP8255
RIG_MODEL_WR1000 = _Hamlib.RIG_MODEL_WR1000
RIG_MODEL_WR1500 = _Hamlib.RIG_MODEL_WR1500
RIG_MODEL_WR1550 = _Hamlib.RIG_MODEL_WR1550
RIG_MODEL_WR3100 = _Hamlib.RIG_MODEL_WR3100
RIG_MODEL_WR3150 = _Hamlib.RIG_MODEL_WR3150
RIG_MODEL_WR3500 = _Hamlib.RIG_MODEL_WR3500
RIG_MODEL_WR3700 = _Hamlib.RIG_MODEL_WR3700
RIG_MODEL_G303 = _Hamlib.RIG_MODEL_G303
RIG_MODEL_G313 = _Hamlib.RIG_MODEL_G313
RIG_MODEL_G305 = _Hamlib.RIG_MODEL_G305
RIG_MODEL_G315 = _Hamlib.RIG_MODEL_G315
RIG_MODEL_TT550 = _Hamlib.RIG_MODEL_TT550
RIG_MODEL_TT538 = _Hamlib.RIG_MODEL_TT538
RIG_MODEL_RX320 = _Hamlib.RIG_MODEL_RX320
RIG_MODEL_RX340 = _Hamlib.RIG_MODEL_RX340
RIG_MODEL_RX350 = _Hamlib.RIG_MODEL_RX350
RIG_MODEL_TT526 = _Hamlib.RIG_MODEL_TT526
RIG_MODEL_TT516 = _Hamlib.RIG_MODEL_TT516
RIG_MODEL_TT565 = _Hamlib.RIG_MODEL_TT565
RIG_MODEL_TT585 = _Hamlib.RIG_MODEL_TT585
RIG_MODEL_TT588 = _Hamlib.RIG_MODEL_TT588
RIG_MODEL_RX331 = _Hamlib.RIG_MODEL_RX331
RIG_MODEL_TT599 = _Hamlib.RIG_MODEL_TT599
RIG_MODEL_DX77 = _Hamlib.RIG_MODEL_DX77
RIG_MODEL_DXSR8 = _Hamlib.RIG_MODEL_DXSR8
RIG_MODEL_505DSP = _Hamlib.RIG_MODEL_505DSP
RIG_MODEL_GNURADIO = _Hamlib.RIG_MODEL_GNURADIO
RIG_MODEL_MC4020 = _Hamlib.RIG_MODEL_MC4020
RIG_MODEL_GRAUDIO = _Hamlib.RIG_MODEL_GRAUDIO
RIG_MODEL_GRAUDIOIQ = _Hamlib.RIG_MODEL_GRAUDIOIQ
RIG_MODEL_USRP_G = _Hamlib.RIG_MODEL_USRP_G
RIG_MODEL_MICROTUNE_4937 = _Hamlib.RIG_MODEL_MICROTUNE_4937
RIG_MODEL_MICROTUNE_4702 = _Hamlib.RIG_MODEL_MICROTUNE_4702
RIG_MODEL_MICROTUNE_4707 = _Hamlib.RIG_MODEL_MICROTUNE_4707
RIG_MODEL_DSP10 = _Hamlib.RIG_MODEL_DSP10
RIG_MODEL_SDR1000 = _Hamlib.RIG_MODEL_SDR1000
RIG_MODEL_SDR1000RFE = _Hamlib.RIG_MODEL_SDR1000RFE
RIG_MODEL_DTTSP = _Hamlib.RIG_MODEL_DTTSP
RIG_MODEL_DTTSP_UDP = _Hamlib.RIG_MODEL_DTTSP_UDP
RIG_MODEL_EKD500 = _Hamlib.RIG_MODEL_EKD500
RIG_MODEL_ELEKTOR304 = _Hamlib.RIG_MODEL_ELEKTOR304
RIG_MODEL_DRT1 = _Hamlib.RIG_MODEL_DRT1
RIG_MODEL_DWT = _Hamlib.RIG_MODEL_DWT
RIG_MODEL_USRP0 = _Hamlib.RIG_MODEL_USRP0
RIG_MODEL_USRP = _Hamlib.RIG_MODEL_USRP
RIG_MODEL_DDS60 = _Hamlib.RIG_MODEL_DDS60
RIG_MODEL_ELEKTOR507 = _Hamlib.RIG_MODEL_ELEKTOR507
RIG_MODEL_MINIVNA = _Hamlib.RIG_MODEL_MINIVNA
RIG_MODEL_SI570AVRUSB = _Hamlib.RIG_MODEL_SI570AVRUSB
RIG_MODEL_PMSDR = _Hamlib.RIG_MODEL_PMSDR
RIG_MODEL_SI570PICUSB = _Hamlib.RIG_MODEL_SI570PICUSB
RIG_MODEL_FIFISDR = _Hamlib.RIG_MODEL_FIFISDR
RIG_MODEL_FUNCUBEDONGLE = _Hamlib.RIG_MODEL_FUNCUBEDONGLE
RIG_MODEL_HIQSDR = _Hamlib.RIG_MODEL_HIQSDR
RIG_MODEL_FASDR = _Hamlib.RIG_MODEL_FASDR
RIG_MODEL_SI570PEABERRY1 = _Hamlib.RIG_MODEL_SI570PEABERRY1
RIG_MODEL_SI570PEABERRY2 = _Hamlib.RIG_MODEL_SI570PEABERRY2
RIG_MODEL_FUNCUBEDONGLEPLUS = _Hamlib.RIG_MODEL_FUNCUBEDONGLEPLUS
RIG_MODEL_RSHFIQ = _Hamlib.RIG_MODEL_RSHFIQ
RIG_MODEL_V4L = _Hamlib.RIG_MODEL_V4L
RIG_MODEL_V4L2 = _Hamlib.RIG_MODEL_V4L2
RIG_MODEL_ESMC = _Hamlib.RIG_MODEL_ESMC
RIG_MODEL_EB200 = _Hamlib.RIG_MODEL_EB200
RIG_MODEL_XK2100 = _Hamlib.RIG_MODEL_XK2100
RIG_MODEL_PRM8060 = _Hamlib.RIG_MODEL_PRM8060
RIG_MODEL_PRM8070 = _Hamlib.RIG_MODEL_PRM8070
RIG_MODEL_ADT_200A = _Hamlib.RIG_MODEL_ADT_200A
RIG_MODEL_IC_M700PRO = _Hamlib.RIG_MODEL_IC_M700PRO
RIG_MODEL_IC_M802 = _Hamlib.RIG_MODEL_IC_M802
RIG_MODEL_IC_M710 = _Hamlib.RIG_MODEL_IC_M710
RIG_MODEL_IC_M803 = _Hamlib.RIG_MODEL_IC_M803
RIG_DORJI = _Hamlib.RIG_DORJI
RIG_BACKEND_DORJI = _Hamlib.RIG_BACKEND_DORJI
RIG_MODEL_DORJI_DRA818V = _Hamlib.RIG_MODEL_DORJI_DRA818V
RIG_MODEL_DORJI_DRA818U = _Hamlib.RIG_MODEL_DORJI_DRA818U
RIG_BARRETT = _Hamlib.RIG_BARRETT
RIG_BACKEND_BARRETT = _Hamlib.RIG_BACKEND_BARRETT
RIG_MODEL_BARRETT_2050 = _Hamlib.RIG_MODEL_BARRETT_2050
RIG_MODEL_BARRETT_950 = _Hamlib.RIG_MODEL_BARRETT_950
RIG_ELAD = _Hamlib.RIG_ELAD
RIG_BACKEND_ELAD = _Hamlib.RIG_BACKEND_ELAD
RIG_MODEL_ELAD_FDM_DUO = _Hamlib.RIG_MODEL_ELAD_FDM_DUO
HAMLIB_COOKIE_SIZE = _Hamlib.HAMLIB_COOKIE_SIZE
RIG_OK = _Hamlib.RIG_OK
RIG_EINVAL = _Hamlib.RIG_EINVAL
RIG_ECONF = _Hamlib.RIG_ECONF
RIG_ENOMEM = _Hamlib.RIG_ENOMEM
RIG_ENIMPL = _Hamlib.RIG_ENIMPL
RIG_ETIMEOUT = _Hamlib.RIG_ETIMEOUT
RIG_EIO = _Hamlib.RIG_EIO
RIG_EINTERNAL = _Hamlib.RIG_EINTERNAL
RIG_EPROTO = _Hamlib.RIG_EPROTO
RIG_ERJCTED = _Hamlib.RIG_ERJCTED
RIG_ETRUNC = _Hamlib.RIG_ETRUNC
RIG_ENAVAIL = _Hamlib.RIG_ENAVAIL
RIG_ENTARGET = _Hamlib.RIG_ENTARGET
RIG_BUSERROR = _Hamlib.RIG_BUSERROR
RIG_BUSBUSY = _Hamlib.RIG_BUSBUSY
RIG_EARG = _Hamlib.RIG_EARG
RIG_EVFO = _Hamlib.RIG_EVFO
RIG_EDOM = _Hamlib.RIG_EDOM
NETRIGCTL_RET = _Hamlib.NETRIGCTL_RET
RIG_DEBUG_NONE = _Hamlib.RIG_DEBUG_NONE
RIG_DEBUG_BUG = _Hamlib.RIG_DEBUG_BUG
RIG_DEBUG_ERR = _Hamlib.RIG_DEBUG_ERR
RIG_DEBUG_WARN = _Hamlib.RIG_DEBUG_WARN
RIG_DEBUG_VERBOSE = _Hamlib.RIG_DEBUG_VERBOSE
RIG_DEBUG_TRACE = _Hamlib.RIG_DEBUG_TRACE
RIG_DEBUG_CACHE = _Hamlib.RIG_DEBUG_CACHE
HAMLIB_RIGNAMSIZ = _Hamlib.HAMLIB_RIGNAMSIZ
HAMLIB_RIGVERSIZ = _Hamlib.HAMLIB_RIGVERSIZ
HAMLIB_FILPATHLEN = _Hamlib.HAMLIB_FILPATHLEN
HAMLIB_FRQRANGESIZ = _Hamlib.HAMLIB_FRQRANGESIZ
HAMLIB_MAXCHANDESC = _Hamlib.HAMLIB_MAXCHANDESC
HAMLIB_TSLSTSIZ = _Hamlib.HAMLIB_TSLSTSIZ
HAMLIB_FLTLSTSIZ = _Hamlib.HAMLIB_FLTLSTSIZ
HAMLIB_MAXDBLSTSIZ = _Hamlib.HAMLIB_MAXDBLSTSIZ
HAMLIB_CHANLSTSIZ = _Hamlib.HAMLIB_CHANLSTSIZ
HAMLIB_MAX_AGC_LEVELS = _Hamlib.HAMLIB_MAX_AGC_LEVELS
HAMLIB_MAX_SPECTRUM_SCOPES = _Hamlib.HAMLIB_MAX_SPECTRUM_SCOPES
HAMLIB_MAX_SPECTRUM_MODES = _Hamlib.HAMLIB_MAX_SPECTRUM_MODES
HAMLIB_MAX_SPECTRUM_AVG_MODES = _Hamlib.HAMLIB_MAX_SPECTRUM_AVG_MODES
HAMLIB_MAX_SPECTRUM_SPANS = _Hamlib.HAMLIB_MAX_SPECTRUM_SPANS
HAMLIB_MAX_CAL_LENGTH = _Hamlib.HAMLIB_MAX_CAL_LENGTH
HAMLIB_MAX_MODES = _Hamlib.HAMLIB_MAX_MODES
HAMLIB_MAX_VFOS = _Hamlib.HAMLIB_MAX_VFOS
HAMLIB_MAX_ROTORS = _Hamlib.HAMLIB_MAX_ROTORS
HAMLIB_MAX_VFO_OPS = _Hamlib.HAMLIB_MAX_VFO_OPS
HAMLIB_MAX_RSCANS = _Hamlib.HAMLIB_MAX_RSCANS
CTCSS_LIST_SIZE = _Hamlib.CTCSS_LIST_SIZE
DCS_LIST_SIZE = _Hamlib.DCS_LIST_SIZE
RIG_PORT_NONE = _Hamlib.RIG_PORT_NONE
RIG_PORT_SERIAL = _Hamlib.RIG_PORT_SERIAL
RIG_PORT_NETWORK = _Hamlib.RIG_PORT_NETWORK
RIG_PORT_DEVICE = _Hamlib.RIG_PORT_DEVICE
RIG_PORT_PACKET = _Hamlib.RIG_PORT_PACKET
RIG_PORT_DTMF = _Hamlib.RIG_PORT_DTMF
RIG_PORT_ULTRA = _Hamlib.RIG_PORT_ULTRA
RIG_PORT_RPC = _Hamlib.RIG_PORT_RPC
RIG_PORT_PARALLEL = _Hamlib.RIG_PORT_PARALLEL
RIG_PORT_USB = _Hamlib.RIG_PORT_USB
RIG_PORT_UDP_NETWORK = _Hamlib.RIG_PORT_UDP_NETWORK
RIG_PORT_CM108 = _Hamlib.RIG_PORT_CM108
RIG_PORT_GPIO = _Hamlib.RIG_PORT_GPIO
RIG_PORT_GPION = _Hamlib.RIG_PORT_GPION
RIG_PARITY_NONE = _Hamlib.RIG_PARITY_NONE
RIG_PARITY_ODD = _Hamlib.RIG_PARITY_ODD
RIG_PARITY_EVEN = _Hamlib.RIG_PARITY_EVEN
RIG_PARITY_MARK = _Hamlib.RIG_PARITY_MARK
RIG_PARITY_SPACE = _Hamlib.RIG_PARITY_SPACE
RIG_HANDSHAKE_NONE = _Hamlib.RIG_HANDSHAKE_NONE
RIG_HANDSHAKE_XONXOFF = _Hamlib.RIG_HANDSHAKE_XONXOFF
RIG_HANDSHAKE_HARDWARE = _Hamlib.RIG_HANDSHAKE_HARDWARE
RIG_SIGNAL_UNSET = _Hamlib.RIG_SIGNAL_UNSET
RIG_SIGNAL_ON = _Hamlib.RIG_SIGNAL_ON
RIG_SIGNAL_OFF = _Hamlib.RIG_SIGNAL_OFF
RIG_FLAG_RECEIVER = _Hamlib.RIG_FLAG_RECEIVER
RIG_FLAG_TRANSMITTER = _Hamlib.RIG_FLAG_TRANSMITTER
RIG_FLAG_SCANNER = _Hamlib.RIG_FLAG_SCANNER
RIG_FLAG_MOBILE = _Hamlib.RIG_FLAG_MOBILE
RIG_FLAG_HANDHELD = _Hamlib.RIG_FLAG_HANDHELD
RIG_FLAG_COMPUTER = _Hamlib.RIG_FLAG_COMPUTER
RIG_FLAG_TRUNKING = _Hamlib.RIG_FLAG_TRUNKING
RIG_FLAG_APRS = _Hamlib.RIG_FLAG_APRS
RIG_FLAG_TNC = _Hamlib.RIG_FLAG_TNC
RIG_FLAG_DXCLUSTER = _Hamlib.RIG_FLAG_DXCLUSTER
RIG_FLAG_TUNER = _Hamlib.RIG_FLAG_TUNER
RIG_TYPE_OTHER = _Hamlib.RIG_TYPE_OTHER
RIG_STATUS_ALPHA = _Hamlib.RIG_STATUS_ALPHA
RIG_STATUS_UNTESTED = _Hamlib.RIG_STATUS_UNTESTED
RIG_STATUS_BETA = _Hamlib.RIG_STATUS_BETA
RIG_STATUS_STABLE = _Hamlib.RIG_STATUS_STABLE
RIG_STATUS_BUGGY = _Hamlib.RIG_STATUS_BUGGY
RIG_RPT_SHIFT_NONE = _Hamlib.RIG_RPT_SHIFT_NONE
RIG_RPT_SHIFT_MINUS = _Hamlib.RIG_RPT_SHIFT_MINUS
RIG_RPT_SHIFT_PLUS = _Hamlib.RIG_RPT_SHIFT_PLUS
RIG_SPLIT_OFF = _Hamlib.RIG_SPLIT_OFF
RIG_SPLIT_ON = _Hamlib.RIG_SPLIT_ON
RIG_VFO_NONE = _Hamlib.RIG_VFO_NONE
RIG_VFO_A = _Hamlib.RIG_VFO_A
RIG_VFO_B = _Hamlib.RIG_VFO_B
RIG_VFO_C = _Hamlib.RIG_VFO_C
RIG_VFO_SUB_A = _Hamlib.RIG_VFO_SUB_A
RIG_VFO_SUB_B = _Hamlib.RIG_VFO_SUB_B
RIG_VFO_SUB_C = _Hamlib.RIG_VFO_SUB_C
RIG_VFO_MAIN_A = _Hamlib.RIG_VFO_MAIN_A
RIG_VFO_MAIN_B = _Hamlib.RIG_VFO_MAIN_B
RIG_VFO_MAIN_C = _Hamlib.RIG_VFO_MAIN_C
RIG_VFO_OTHER = _Hamlib.RIG_VFO_OTHER
RIG_VFO_SUB = _Hamlib.RIG_VFO_SUB
RIG_VFO_MAIN = _Hamlib.RIG_VFO_MAIN
RIG_VFO_VFO = _Hamlib.RIG_VFO_VFO
RIG_VFO_MEM = _Hamlib.RIG_VFO_MEM
RIG_VFO_CURR = _Hamlib.RIG_VFO_CURR
RIG_VFO_TX_FLAG = _Hamlib.RIG_VFO_TX_FLAG
RIG_VFO_ALL = _Hamlib.RIG_VFO_ALL
RIG_VFO_TX = _Hamlib.RIG_VFO_TX
RIG_VFO_RX = _Hamlib.RIG_VFO_RX
RIG_TARGETABLE_NONE = _Hamlib.RIG_TARGETABLE_NONE
RIG_TARGETABLE_FREQ = _Hamlib.RIG_TARGETABLE_FREQ
RIG_TARGETABLE_MODE = _Hamlib.RIG_TARGETABLE_MODE
RIG_TARGETABLE_PURE = _Hamlib.RIG_TARGETABLE_PURE
RIG_TARGETABLE_TONE = _Hamlib.RIG_TARGETABLE_TONE
RIG_TARGETABLE_FUNC = _Hamlib.RIG_TARGETABLE_FUNC
RIG_TARGETABLE_LEVEL = _Hamlib.RIG_TARGETABLE_LEVEL
RIG_TARGETABLE_RITXIT = _Hamlib.RIG_TARGETABLE_RITXIT
RIG_TARGETABLE_PTT = _Hamlib.RIG_TARGETABLE_PTT
RIG_TARGETABLE_MEM = _Hamlib.RIG_TARGETABLE_MEM
RIG_TARGETABLE_BANK = _Hamlib.RIG_TARGETABLE_BANK
RIG_TARGETABLE_ANT = _Hamlib.RIG_TARGETABLE_ANT
RIG_TARGETABLE_ROOFING = _Hamlib.RIG_TARGETABLE_ROOFING
RIG_TARGETABLE_SPECTRUM = _Hamlib.RIG_TARGETABLE_SPECTRUM
RIG_TARGETABLE_COMMON = _Hamlib.RIG_TARGETABLE_COMMON
RIG_TARGETABLE_ALL = _Hamlib.RIG_TARGETABLE_ALL
VFO_DUAL = _Hamlib.VFO_DUAL
RIG_DCD_OFF = _Hamlib.RIG_DCD_OFF
RIG_DCD_ON = _Hamlib.RIG_DCD_ON
RIG_DCD_NONE = _Hamlib.RIG_DCD_NONE
RIG_DCD_RIG = _Hamlib.RIG_DCD_RIG
RIG_DCD_SERIAL_DSR = _Hamlib.RIG_DCD_SERIAL_DSR
RIG_DCD_SERIAL_CTS = _Hamlib.RIG_DCD_SERIAL_CTS
RIG_DCD_SERIAL_CAR = _Hamlib.RIG_DCD_SERIAL_CAR
RIG_DCD_PARALLEL = _Hamlib.RIG_DCD_PARALLEL
RIG_DCD_CM108 = _Hamlib.RIG_DCD_CM108
RIG_DCD_GPIO = _Hamlib.RIG_DCD_GPIO
RIG_DCD_GPION = _Hamlib.RIG_DCD_GPION
RIG_PTT_OFF = _Hamlib.RIG_PTT_OFF
RIG_PTT_ON = _Hamlib.RIG_PTT_ON
RIG_PTT_ON_MIC = _Hamlib.RIG_PTT_ON_MIC
RIG_PTT_ON_DATA = _Hamlib.RIG_PTT_ON_DATA
RIG_PTT_NONE = _Hamlib.RIG_PTT_NONE
RIG_PTT_RIG = _Hamlib.RIG_PTT_RIG
RIG_PTT_SERIAL_DTR = _Hamlib.RIG_PTT_SERIAL_DTR
RIG_PTT_SERIAL_RTS = _Hamlib.RIG_PTT_SERIAL_RTS
RIG_PTT_PARALLEL = _Hamlib.RIG_PTT_PARALLEL
RIG_PTT_RIG_MICDATA = _Hamlib.RIG_PTT_RIG_MICDATA
RIG_PTT_CM108 = _Hamlib.RIG_PTT_CM108
RIG_PTT_GPIO = _Hamlib.RIG_PTT_GPIO
RIG_PTT_GPION = _Hamlib.RIG_PTT_GPION
RIG_POWER_OFF = _Hamlib.RIG_POWER_OFF
RIG_POWER_ON = _Hamlib.RIG_POWER_ON
RIG_POWER_STANDBY = _Hamlib.RIG_POWER_STANDBY
RIG_POWER_OPERATE = _Hamlib.RIG_POWER_OPERATE
RIG_POWER_UNKNOWN = _Hamlib.RIG_POWER_UNKNOWN
RIG_RESET_NONE = _Hamlib.RIG_RESET_NONE
RIG_RESET_SOFT = _Hamlib.RIG_RESET_SOFT
RIG_RESET_VFO = _Hamlib.RIG_RESET_VFO
RIG_RESET_MCALL = _Hamlib.RIG_RESET_MCALL
RIG_RESET_MASTER = _Hamlib.RIG_RESET_MASTER
RIG_OP_NONE = _Hamlib.RIG_OP_NONE
RIG_OP_CPY = _Hamlib.RIG_OP_CPY
RIG_OP_XCHG = _Hamlib.RIG_OP_XCHG
RIG_OP_FROM_VFO = _Hamlib.RIG_OP_FROM_VFO
RIG_OP_TO_VFO = _Hamlib.RIG_OP_TO_VFO
RIG_OP_MCL = _Hamlib.RIG_OP_MCL
RIG_OP_UP = _Hamlib.RIG_OP_UP
RIG_OP_DOWN = _Hamlib.RIG_OP_DOWN
RIG_OP_BAND_UP = _Hamlib.RIG_OP_BAND_UP
RIG_OP_BAND_DOWN = _Hamlib.RIG_OP_BAND_DOWN
RIG_OP_LEFT = _Hamlib.RIG_OP_LEFT
RIG_OP_RIGHT = _Hamlib.RIG_OP_RIGHT
RIG_OP_TUNE = _Hamlib.RIG_OP_TUNE
RIG_OP_TOGGLE = _Hamlib.RIG_OP_TOGGLE
RIG_SCAN_NONE = _Hamlib.RIG_SCAN_NONE
RIG_SCAN_MEM = _Hamlib.RIG_SCAN_MEM
RIG_SCAN_SLCT = _Hamlib.RIG_SCAN_SLCT
RIG_SCAN_PRIO = _Hamlib.RIG_SCAN_PRIO
RIG_SCAN_PROG = _Hamlib.RIG_SCAN_PROG
RIG_SCAN_DELTA = _Hamlib.RIG_SCAN_DELTA
RIG_SCAN_VFO = _Hamlib.RIG_SCAN_VFO
RIG_SCAN_PLT = _Hamlib.RIG_SCAN_PLT
RIG_SCAN_STOP = _Hamlib.RIG_SCAN_STOP
RIG_CONF_END = _Hamlib.RIG_CONF_END
RIG_CONF_STRING = _Hamlib.RIG_CONF_STRING
RIG_CONF_COMBO = _Hamlib.RIG_CONF_COMBO
RIG_CONF_NUMERIC = _Hamlib.RIG_CONF_NUMERIC
RIG_CONF_CHECKBUTTON = _Hamlib.RIG_CONF_CHECKBUTTON
RIG_CONF_BUTTON = _Hamlib.RIG_CONF_BUTTON
RIG_CONF_BINARY = _Hamlib.RIG_CONF_BINARY
RIG_COMBO_MAX = _Hamlib.RIG_COMBO_MAX
RIG_BIN_MAX = _Hamlib.RIG_BIN_MAX
class confparams(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    token = property(_Hamlib.confparams_token_get, _Hamlib.confparams_token_set)
    name = property(_Hamlib.confparams_name_get)
    label = property(_Hamlib.confparams_label_get)
    tooltip = property(_Hamlib.confparams_tooltip_get)
    dflt = property(_Hamlib.confparams_dflt_get)
    type = property(_Hamlib.confparams_type_get, _Hamlib.confparams_type_set)
    u = property(_Hamlib.confparams_u_get)

    def __init__(self):
        _Hamlib.confparams_swiginit(self, _Hamlib.new_confparams())
    __swig_destroy__ = _Hamlib.delete_confparams

# Register confparams in _Hamlib:
_Hamlib.confparams_swigregister(confparams)
cvar = _Hamlib.cvar
hamlib_version = cvar.hamlib_version
hamlib_copyright = cvar.hamlib_copyright

class confparams_u(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    n = property(_Hamlib.confparams_u_n_get)
    c = property(_Hamlib.confparams_u_c_get)

    def __init__(self):
        _Hamlib.confparams_u_swiginit(self, _Hamlib.new_confparams_u())
    __swig_destroy__ = _Hamlib.delete_confparams_u

# Register confparams_u in _Hamlib:
_Hamlib.confparams_u_swigregister(confparams_u)

class confparams_u_c(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    combostr = property(_Hamlib.confparams_u_c_combostr_get, _Hamlib.confparams_u_c_combostr_set)

    def __init__(self):
        _Hamlib.confparams_u_c_swiginit(self, _Hamlib.new_confparams_u_c())
    __swig_destroy__ = _Hamlib.delete_confparams_u_c

# Register confparams_u_c in _Hamlib:
_Hamlib.confparams_u_c_swigregister(confparams_u_c)

class confparams_u_n(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    min = property(_Hamlib.confparams_u_n_min_get, _Hamlib.confparams_u_n_min_set)
    max = property(_Hamlib.confparams_u_n_max_get, _Hamlib.confparams_u_n_max_set)
    step = property(_Hamlib.confparams_u_n_step_get, _Hamlib.confparams_u_n_step_set)

    def __init__(self):
        _Hamlib.confparams_u_n_swiginit(self, _Hamlib.new_confparams_u_n())
    __swig_destroy__ = _Hamlib.delete_confparams_u_n

# Register confparams_u_n in _Hamlib:
_Hamlib.confparams_u_n_swigregister(confparams_u_n)

RIG_ANN_NONE = _Hamlib.RIG_ANN_NONE
RIG_ANN_OFF = _Hamlib.RIG_ANN_OFF
RIG_ANN_FREQ = _Hamlib.RIG_ANN_FREQ
RIG_ANN_RXMODE = _Hamlib.RIG_ANN_RXMODE
RIG_ANN_CW = _Hamlib.RIG_ANN_CW
RIG_ANN_ENG = _Hamlib.RIG_ANN_ENG
RIG_ANN_JAP = _Hamlib.RIG_ANN_JAP
RIG_ANT_NONE = _Hamlib.RIG_ANT_NONE
RIG_ANT_MAX = _Hamlib.RIG_ANT_MAX
RIG_AGC_OFF = _Hamlib.RIG_AGC_OFF
RIG_AGC_SUPERFAST = _Hamlib.RIG_AGC_SUPERFAST
RIG_AGC_FAST = _Hamlib.RIG_AGC_FAST
RIG_AGC_SLOW = _Hamlib.RIG_AGC_SLOW
RIG_AGC_USER = _Hamlib.RIG_AGC_USER
RIG_AGC_MEDIUM = _Hamlib.RIG_AGC_MEDIUM
RIG_AGC_AUTO = _Hamlib.RIG_AGC_AUTO
RIG_METER_NONE = _Hamlib.RIG_METER_NONE
RIG_METER_SWR = _Hamlib.RIG_METER_SWR
RIG_METER_COMP = _Hamlib.RIG_METER_COMP
RIG_METER_ALC = _Hamlib.RIG_METER_ALC
RIG_METER_IC = _Hamlib.RIG_METER_IC
RIG_METER_DB = _Hamlib.RIG_METER_DB
RIG_METER_PO = _Hamlib.RIG_METER_PO
RIG_METER_VDD = _Hamlib.RIG_METER_VDD
RIG_METER_TEMP = _Hamlib.RIG_METER_TEMP
class value_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    i = property(_Hamlib.value_t_i_get, _Hamlib.value_t_i_set)
    f = property(_Hamlib.value_t_f_get, _Hamlib.value_t_f_set)
    s = property(_Hamlib.value_t_s_get, _Hamlib.value_t_s_set)
    cs = property(_Hamlib.value_t_cs_get)
    b = property(_Hamlib.value_t_b_get)

    def __init__(self):
        _Hamlib.value_t_swiginit(self, _Hamlib.new_value_t())
    __swig_destroy__ = _Hamlib.delete_value_t

# Register value_t in _Hamlib:
_Hamlib.value_t_swigregister(value_t)

class value_t_b(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    l = property(_Hamlib.value_t_b_l_get, _Hamlib.value_t_b_l_set)
    d = property(_Hamlib.value_t_b_d_get, _Hamlib.value_t_b_d_set)

    def __init__(self):
        _Hamlib.value_t_b_swiginit(self, _Hamlib.new_value_t_b())
    __swig_destroy__ = _Hamlib.delete_value_t_b

# Register value_t_b in _Hamlib:
_Hamlib.value_t_b_swigregister(value_t_b)

RIG_LEVEL_NONE = _Hamlib.RIG_LEVEL_NONE
RIG_LEVEL_PREAMP = _Hamlib.RIG_LEVEL_PREAMP
RIG_LEVEL_ATT = _Hamlib.RIG_LEVEL_ATT
RIG_LEVEL_VOXDELAY = _Hamlib.RIG_LEVEL_VOXDELAY
RIG_LEVEL_AF = _Hamlib.RIG_LEVEL_AF
RIG_LEVEL_RF = _Hamlib.RIG_LEVEL_RF
RIG_LEVEL_SQL = _Hamlib.RIG_LEVEL_SQL
RIG_LEVEL_IF = _Hamlib.RIG_LEVEL_IF
RIG_LEVEL_APF = _Hamlib.RIG_LEVEL_APF
RIG_LEVEL_NR = _Hamlib.RIG_LEVEL_NR
RIG_LEVEL_PBT_IN = _Hamlib.RIG_LEVEL_PBT_IN
RIG_LEVEL_PBT_OUT = _Hamlib.RIG_LEVEL_PBT_OUT
RIG_LEVEL_CWPITCH = _Hamlib.RIG_LEVEL_CWPITCH
RIG_LEVEL_RFPOWER = _Hamlib.RIG_LEVEL_RFPOWER
RIG_LEVEL_MICGAIN = _Hamlib.RIG_LEVEL_MICGAIN
RIG_LEVEL_KEYSPD = _Hamlib.RIG_LEVEL_KEYSPD
RIG_LEVEL_NOTCHF = _Hamlib.RIG_LEVEL_NOTCHF
RIG_LEVEL_COMP = _Hamlib.RIG_LEVEL_COMP
RIG_LEVEL_AGC = _Hamlib.RIG_LEVEL_AGC
RIG_LEVEL_BKINDL = _Hamlib.RIG_LEVEL_BKINDL
RIG_LEVEL_BALANCE = _Hamlib.RIG_LEVEL_BALANCE
RIG_LEVEL_METER = _Hamlib.RIG_LEVEL_METER
RIG_LEVEL_VOXGAIN = _Hamlib.RIG_LEVEL_VOXGAIN
RIG_LEVEL_ANTIVOX = _Hamlib.RIG_LEVEL_ANTIVOX
RIG_LEVEL_SLOPE_LOW = _Hamlib.RIG_LEVEL_SLOPE_LOW
RIG_LEVEL_SLOPE_HIGH = _Hamlib.RIG_LEVEL_SLOPE_HIGH
RIG_LEVEL_BKIN_DLYMS = _Hamlib.RIG_LEVEL_BKIN_DLYMS
RIG_LEVEL_RAWSTR = _Hamlib.RIG_LEVEL_RAWSTR
RIG_LEVEL_SWR = _Hamlib.RIG_LEVEL_SWR
RIG_LEVEL_ALC = _Hamlib.RIG_LEVEL_ALC
RIG_LEVEL_STRENGTH = _Hamlib.RIG_LEVEL_STRENGTH
RIG_LEVEL_RFPOWER_METER = _Hamlib.RIG_LEVEL_RFPOWER_METER
RIG_LEVEL_COMP_METER = _Hamlib.RIG_LEVEL_COMP_METER
RIG_LEVEL_VD_METER = _Hamlib.RIG_LEVEL_VD_METER
RIG_LEVEL_ID_METER = _Hamlib.RIG_LEVEL_ID_METER
RIG_LEVEL_NOTCHF_RAW = _Hamlib.RIG_LEVEL_NOTCHF_RAW
RIG_LEVEL_MONITOR_GAIN = _Hamlib.RIG_LEVEL_MONITOR_GAIN
RIG_LEVEL_NB = _Hamlib.RIG_LEVEL_NB
RIG_LEVEL_RFPOWER_METER_WATTS = _Hamlib.RIG_LEVEL_RFPOWER_METER_WATTS
RIG_LEVEL_SPECTRUM_MODE = _Hamlib.RIG_LEVEL_SPECTRUM_MODE
RIG_LEVEL_SPECTRUM_SPAN = _Hamlib.RIG_LEVEL_SPECTRUM_SPAN
RIG_LEVEL_SPECTRUM_EDGE_LOW = _Hamlib.RIG_LEVEL_SPECTRUM_EDGE_LOW
RIG_LEVEL_SPECTRUM_EDGE_HIGH = _Hamlib.RIG_LEVEL_SPECTRUM_EDGE_HIGH
RIG_LEVEL_SPECTRUM_SPEED = _Hamlib.RIG_LEVEL_SPECTRUM_SPEED
RIG_LEVEL_SPECTRUM_REF = _Hamlib.RIG_LEVEL_SPECTRUM_REF
RIG_LEVEL_SPECTRUM_AVG = _Hamlib.RIG_LEVEL_SPECTRUM_AVG
RIG_LEVEL_SPECTRUM_ATT = _Hamlib.RIG_LEVEL_SPECTRUM_ATT
RIG_LEVEL_TEMP_METER = _Hamlib.RIG_LEVEL_TEMP_METER
RIG_LEVEL_48 = _Hamlib.RIG_LEVEL_48
RIG_LEVEL_49 = _Hamlib.RIG_LEVEL_49
RIG_LEVEL_50 = _Hamlib.RIG_LEVEL_50
RIG_LEVEL_51 = _Hamlib.RIG_LEVEL_51
RIG_LEVEL_52 = _Hamlib.RIG_LEVEL_52
RIG_LEVEL_53 = _Hamlib.RIG_LEVEL_53
RIG_LEVEL_54 = _Hamlib.RIG_LEVEL_54
RIG_LEVEL_55 = _Hamlib.RIG_LEVEL_55
RIG_LEVEL_56 = _Hamlib.RIG_LEVEL_56
RIG_LEVEL_57 = _Hamlib.RIG_LEVEL_57
RIG_LEVEL_58 = _Hamlib.RIG_LEVEL_58
RIG_LEVEL_59 = _Hamlib.RIG_LEVEL_59
RIG_LEVEL_60 = _Hamlib.RIG_LEVEL_60
RIG_LEVEL_61 = _Hamlib.RIG_LEVEL_61
RIG_LEVEL_62 = _Hamlib.RIG_LEVEL_62
RIG_LEVEL_63 = _Hamlib.RIG_LEVEL_63
RIG_LEVEL_FLOAT_LIST = _Hamlib.RIG_LEVEL_FLOAT_LIST
RIG_LEVEL_READONLY_LIST = _Hamlib.RIG_LEVEL_READONLY_LIST
RIG_PARM_NONE = _Hamlib.RIG_PARM_NONE
RIG_PARM_ANN = _Hamlib.RIG_PARM_ANN
RIG_PARM_APO = _Hamlib.RIG_PARM_APO
RIG_PARM_BACKLIGHT = _Hamlib.RIG_PARM_BACKLIGHT
RIG_PARM_BEEP = _Hamlib.RIG_PARM_BEEP
RIG_PARM_TIME = _Hamlib.RIG_PARM_TIME
RIG_PARM_BAT = _Hamlib.RIG_PARM_BAT
RIG_PARM_KEYLIGHT = _Hamlib.RIG_PARM_KEYLIGHT
RIG_PARM_SCREENSAVER = _Hamlib.RIG_PARM_SCREENSAVER
RIG_COOKIE_GET = _Hamlib.RIG_COOKIE_GET
RIG_COOKIE_RELEASE = _Hamlib.RIG_COOKIE_RELEASE
RIG_COOKIE_RENEW = _Hamlib.RIG_COOKIE_RENEW
RIG_MULTICAST_POLL = _Hamlib.RIG_MULTICAST_POLL
RIG_MULTICAST_TRANSCEIVE = _Hamlib.RIG_MULTICAST_TRANSCEIVE
RIG_MULTICAST_SPECTRUM = _Hamlib.RIG_MULTICAST_SPECTRUM
RIG_SETTING_MAX = _Hamlib.RIG_SETTING_MAX
RIG_TRN_OFF = _Hamlib.RIG_TRN_OFF
RIG_TRN_RIG = _Hamlib.RIG_TRN_RIG
RIG_TRN_POLL = _Hamlib.RIG_TRN_POLL
RIG_FUNC_NONE = _Hamlib.RIG_FUNC_NONE
RIG_FUNC_FAGC = _Hamlib.RIG_FUNC_FAGC
RIG_FUNC_NB = _Hamlib.RIG_FUNC_NB
RIG_FUNC_COMP = _Hamlib.RIG_FUNC_COMP
RIG_FUNC_VOX = _Hamlib.RIG_FUNC_VOX
RIG_FUNC_TONE = _Hamlib.RIG_FUNC_TONE
RIG_FUNC_TSQL = _Hamlib.RIG_FUNC_TSQL
RIG_FUNC_SBKIN = _Hamlib.RIG_FUNC_SBKIN
RIG_FUNC_FBKIN = _Hamlib.RIG_FUNC_FBKIN
RIG_FUNC_ANF = _Hamlib.RIG_FUNC_ANF
RIG_FUNC_NR = _Hamlib.RIG_FUNC_NR
RIG_FUNC_AIP = _Hamlib.RIG_FUNC_AIP
RIG_FUNC_APF = _Hamlib.RIG_FUNC_APF
RIG_FUNC_MON = _Hamlib.RIG_FUNC_MON
RIG_FUNC_MN = _Hamlib.RIG_FUNC_MN
RIG_FUNC_RF = _Hamlib.RIG_FUNC_RF
RIG_FUNC_ARO = _Hamlib.RIG_FUNC_ARO
RIG_FUNC_LOCK = _Hamlib.RIG_FUNC_LOCK
RIG_FUNC_MUTE = _Hamlib.RIG_FUNC_MUTE
RIG_FUNC_VSC = _Hamlib.RIG_FUNC_VSC
RIG_FUNC_REV = _Hamlib.RIG_FUNC_REV
RIG_FUNC_SQL = _Hamlib.RIG_FUNC_SQL
RIG_FUNC_ABM = _Hamlib.RIG_FUNC_ABM
RIG_FUNC_BC = _Hamlib.RIG_FUNC_BC
RIG_FUNC_MBC = _Hamlib.RIG_FUNC_MBC
RIG_FUNC_RIT = _Hamlib.RIG_FUNC_RIT
RIG_FUNC_AFC = _Hamlib.RIG_FUNC_AFC
RIG_FUNC_SATMODE = _Hamlib.RIG_FUNC_SATMODE
RIG_FUNC_SCOPE = _Hamlib.RIG_FUNC_SCOPE
RIG_FUNC_RESUME = _Hamlib.RIG_FUNC_RESUME
RIG_FUNC_TBURST = _Hamlib.RIG_FUNC_TBURST
RIG_FUNC_TUNER = _Hamlib.RIG_FUNC_TUNER
RIG_FUNC_XIT = _Hamlib.RIG_FUNC_XIT
RIG_FUNC_NB2 = _Hamlib.RIG_FUNC_NB2
RIG_FUNC_CSQL = _Hamlib.RIG_FUNC_CSQL
RIG_FUNC_AFLT = _Hamlib.RIG_FUNC_AFLT
RIG_FUNC_ANL = _Hamlib.RIG_FUNC_ANL
RIG_FUNC_BC2 = _Hamlib.RIG_FUNC_BC2
RIG_FUNC_DUAL_WATCH = _Hamlib.RIG_FUNC_DUAL_WATCH
RIG_FUNC_DIVERSITY = _Hamlib.RIG_FUNC_DIVERSITY
RIG_FUNC_DSQL = _Hamlib.RIG_FUNC_DSQL
RIG_FUNC_SCEN = _Hamlib.RIG_FUNC_SCEN
RIG_FUNC_SLICE = _Hamlib.RIG_FUNC_SLICE
RIG_FUNC_TRANSCEIVE = _Hamlib.RIG_FUNC_TRANSCEIVE
RIG_FUNC_SPECTRUM = _Hamlib.RIG_FUNC_SPECTRUM
RIG_FUNC_SPECTRUM_HOLD = _Hamlib.RIG_FUNC_SPECTRUM_HOLD
RIG_FUNC_BIT45 = _Hamlib.RIG_FUNC_BIT45
RIG_FUNC_BIT46 = _Hamlib.RIG_FUNC_BIT46
RIG_FUNC_BIT47 = _Hamlib.RIG_FUNC_BIT47
RIG_FUNC_BIT48 = _Hamlib.RIG_FUNC_BIT48
RIG_FUNC_BIT49 = _Hamlib.RIG_FUNC_BIT49
RIG_FUNC_BIT50 = _Hamlib.RIG_FUNC_BIT50
RIG_FUNC_BIT51 = _Hamlib.RIG_FUNC_BIT51
RIG_FUNC_BIT52 = _Hamlib.RIG_FUNC_BIT52
RIG_FUNC_BIT53 = _Hamlib.RIG_FUNC_BIT53
RIG_FUNC_BIT54 = _Hamlib.RIG_FUNC_BIT54
RIG_FUNC_BIT55 = _Hamlib.RIG_FUNC_BIT55
RIG_FUNC_BIT56 = _Hamlib.RIG_FUNC_BIT56
RIG_FUNC_BIT57 = _Hamlib.RIG_FUNC_BIT57
RIG_FUNC_BIT58 = _Hamlib.RIG_FUNC_BIT58
RIG_FUNC_BIT59 = _Hamlib.RIG_FUNC_BIT59
RIG_FUNC_BIT60 = _Hamlib.RIG_FUNC_BIT60
RIG_FUNC_BIT61 = _Hamlib.RIG_FUNC_BIT61
RIG_FUNC_BIT62 = _Hamlib.RIG_FUNC_BIT62
RIG_FUNC_BIT63 = _Hamlib.RIG_FUNC_BIT63
RIG_MODE_NONE = _Hamlib.RIG_MODE_NONE
RIG_MODE_AM = _Hamlib.RIG_MODE_AM
RIG_MODE_CW = _Hamlib.RIG_MODE_CW
RIG_MODE_USB = _Hamlib.RIG_MODE_USB
RIG_MODE_LSB = _Hamlib.RIG_MODE_LSB
RIG_MODE_RTTY = _Hamlib.RIG_MODE_RTTY
RIG_MODE_FM = _Hamlib.RIG_MODE_FM
RIG_MODE_WFM = _Hamlib.RIG_MODE_WFM
RIG_MODE_CWR = _Hamlib.RIG_MODE_CWR
RIG_MODE_RTTYR = _Hamlib.RIG_MODE_RTTYR
RIG_MODE_AMS = _Hamlib.RIG_MODE_AMS
RIG_MODE_PKTLSB = _Hamlib.RIG_MODE_PKTLSB
RIG_MODE_PKTUSB = _Hamlib.RIG_MODE_PKTUSB
RIG_MODE_PKTFM = _Hamlib.RIG_MODE_PKTFM
RIG_MODE_ECSSUSB = _Hamlib.RIG_MODE_ECSSUSB
RIG_MODE_ECSSLSB = _Hamlib.RIG_MODE_ECSSLSB
RIG_MODE_FAX = _Hamlib.RIG_MODE_FAX
RIG_MODE_SAM = _Hamlib.RIG_MODE_SAM
RIG_MODE_SAL = _Hamlib.RIG_MODE_SAL
RIG_MODE_SAH = _Hamlib.RIG_MODE_SAH
RIG_MODE_DSB = _Hamlib.RIG_MODE_DSB
RIG_MODE_FMN = _Hamlib.RIG_MODE_FMN
RIG_MODE_PKTAM = _Hamlib.RIG_MODE_PKTAM
RIG_MODE_P25 = _Hamlib.RIG_MODE_P25
RIG_MODE_DSTAR = _Hamlib.RIG_MODE_DSTAR
RIG_MODE_DPMR = _Hamlib.RIG_MODE_DPMR
RIG_MODE_NXDNVN = _Hamlib.RIG_MODE_NXDNVN
RIG_MODE_NXDN_N = _Hamlib.RIG_MODE_NXDN_N
RIG_MODE_DCR = _Hamlib.RIG_MODE_DCR
RIG_MODE_AMN = _Hamlib.RIG_MODE_AMN
RIG_MODE_PSK = _Hamlib.RIG_MODE_PSK
RIG_MODE_PSKR = _Hamlib.RIG_MODE_PSKR
RIG_MODE_DD = _Hamlib.RIG_MODE_DD
RIG_MODE_C4FM = _Hamlib.RIG_MODE_C4FM
RIG_MODE_PKTFMN = _Hamlib.RIG_MODE_PKTFMN
RIG_MODE_SPEC = _Hamlib.RIG_MODE_SPEC
RIG_MODE_CWN = _Hamlib.RIG_MODE_CWN
RIG_MODE_IQ = _Hamlib.RIG_MODE_IQ
RIG_MODE_BIT38 = _Hamlib.RIG_MODE_BIT38
RIG_MODE_BIT39 = _Hamlib.RIG_MODE_BIT39
RIG_MODE_BIT40 = _Hamlib.RIG_MODE_BIT40
RIG_MODE_BIT41 = _Hamlib.RIG_MODE_BIT41
RIG_MODE_BIT42 = _Hamlib.RIG_MODE_BIT42
RIG_MODE_BIT43 = _Hamlib.RIG_MODE_BIT43
RIG_MODE_BIT44 = _Hamlib.RIG_MODE_BIT44
RIG_MODE_BIT45 = _Hamlib.RIG_MODE_BIT45
RIG_MODE_BIT46 = _Hamlib.RIG_MODE_BIT46
RIG_MODE_BIT47 = _Hamlib.RIG_MODE_BIT47
RIG_MODE_BIT48 = _Hamlib.RIG_MODE_BIT48
RIG_MODE_BIT49 = _Hamlib.RIG_MODE_BIT49
RIG_MODE_BIT50 = _Hamlib.RIG_MODE_BIT50
RIG_MODE_BIT51 = _Hamlib.RIG_MODE_BIT51
RIG_MODE_BIT52 = _Hamlib.RIG_MODE_BIT52
RIG_MODE_BIT53 = _Hamlib.RIG_MODE_BIT53
RIG_MODE_BIT54 = _Hamlib.RIG_MODE_BIT54
RIG_MODE_BIT55 = _Hamlib.RIG_MODE_BIT55
RIG_MODE_BIT56 = _Hamlib.RIG_MODE_BIT56
RIG_MODE_BIT57 = _Hamlib.RIG_MODE_BIT57
RIG_MODE_BIT58 = _Hamlib.RIG_MODE_BIT58
RIG_MODE_BIT59 = _Hamlib.RIG_MODE_BIT59
RIG_MODE_BIT60 = _Hamlib.RIG_MODE_BIT60
RIG_MODE_BIT61 = _Hamlib.RIG_MODE_BIT61
RIG_MODE_BIT62 = _Hamlib.RIG_MODE_BIT62
RIG_MODE_TESTS_MAX = _Hamlib.RIG_MODE_TESTS_MAX
RIG_MODE_SSB = _Hamlib.RIG_MODE_SSB
RIG_MODE_ECSS = _Hamlib.RIG_MODE_ECSS
RIG_DBLST_END = _Hamlib.RIG_DBLST_END
class freq_range_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    startf = property(_Hamlib.freq_range_t_startf_get, _Hamlib.freq_range_t_startf_set)
    endf = property(_Hamlib.freq_range_t_endf_get, _Hamlib.freq_range_t_endf_set)
    modes = property(_Hamlib.freq_range_t_modes_get, _Hamlib.freq_range_t_modes_set)
    low_power = property(_Hamlib.freq_range_t_low_power_get, _Hamlib.freq_range_t_low_power_set)
    high_power = property(_Hamlib.freq_range_t_high_power_get, _Hamlib.freq_range_t_high_power_set)
    vfo = property(_Hamlib.freq_range_t_vfo_get, _Hamlib.freq_range_t_vfo_set)
    ant = property(_Hamlib.freq_range_t_ant_get, _Hamlib.freq_range_t_ant_set)
    label = property(_Hamlib.freq_range_t_label_get, _Hamlib.freq_range_t_label_set)

    def __init__(self):
        _Hamlib.freq_range_t_swiginit(self, _Hamlib.new_freq_range_t())
    __swig_destroy__ = _Hamlib.delete_freq_range_t

# Register freq_range_t in _Hamlib:
_Hamlib.freq_range_t_swigregister(freq_range_t)

class tuning_step_list(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    modes = property(_Hamlib.tuning_step_list_modes_get, _Hamlib.tuning_step_list_modes_set)
    ts = property(_Hamlib.tuning_step_list_ts_get, _Hamlib.tuning_step_list_ts_set)

    def __init__(self):
        _Hamlib.tuning_step_list_swiginit(self, _Hamlib.new_tuning_step_list())
    __swig_destroy__ = _Hamlib.delete_tuning_step_list

# Register tuning_step_list in _Hamlib:
_Hamlib.tuning_step_list_swigregister(tuning_step_list)

RIG_TS_ANY = _Hamlib.RIG_TS_ANY
class filter_list(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    modes = property(_Hamlib.filter_list_modes_get, _Hamlib.filter_list_modes_set)
    width = property(_Hamlib.filter_list_width_get, _Hamlib.filter_list_width_set)

    def __init__(self):
        _Hamlib.filter_list_swiginit(self, _Hamlib.new_filter_list())
    __swig_destroy__ = _Hamlib.delete_filter_list

# Register filter_list in _Hamlib:
_Hamlib.filter_list_swigregister(filter_list)

RIG_FLT_ANY = _Hamlib.RIG_FLT_ANY
RIG_CHFLAG_NONE = _Hamlib.RIG_CHFLAG_NONE
RIG_CHFLAG_SKIP = _Hamlib.RIG_CHFLAG_SKIP
RIG_CHFLAG_DATA = _Hamlib.RIG_CHFLAG_DATA
RIG_CHFLAG_PSKIP = _Hamlib.RIG_CHFLAG_PSKIP
class ext_list(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    token = property(_Hamlib.ext_list_token_get, _Hamlib.ext_list_token_set)
    val = property(_Hamlib.ext_list_val_get, _Hamlib.ext_list_val_set)

    def __init__(self):
        _Hamlib.ext_list_swiginit(self, _Hamlib.new_ext_list())
    __swig_destroy__ = _Hamlib.delete_ext_list

# Register ext_list in _Hamlib:
_Hamlib.ext_list_swigregister(ext_list)

class channel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    channel_num = property(_Hamlib.channel_channel_num_get, _Hamlib.channel_channel_num_set)
    bank_num = property(_Hamlib.channel_bank_num_get, _Hamlib.channel_bank_num_set)
    vfo = property(_Hamlib.channel_vfo_get, _Hamlib.channel_vfo_set)
    ant = property(_Hamlib.channel_ant_get, _Hamlib.channel_ant_set)
    freq = property(_Hamlib.channel_freq_get, _Hamlib.channel_freq_set)
    mode = property(_Hamlib.channel_mode_get, _Hamlib.channel_mode_set)
    width = property(_Hamlib.channel_width_get, _Hamlib.channel_width_set)
    tx_freq = property(_Hamlib.channel_tx_freq_get, _Hamlib.channel_tx_freq_set)
    tx_mode = property(_Hamlib.channel_tx_mode_get, _Hamlib.channel_tx_mode_set)
    tx_width = property(_Hamlib.channel_tx_width_get, _Hamlib.channel_tx_width_set)
    split = property(_Hamlib.channel_split_get, _Hamlib.channel_split_set)
    tx_vfo = property(_Hamlib.channel_tx_vfo_get, _Hamlib.channel_tx_vfo_set)
    rptr_shift = property(_Hamlib.channel_rptr_shift_get, _Hamlib.channel_rptr_shift_set)
    rptr_offs = property(_Hamlib.channel_rptr_offs_get, _Hamlib.channel_rptr_offs_set)
    tuning_step = property(_Hamlib.channel_tuning_step_get, _Hamlib.channel_tuning_step_set)
    rit = property(_Hamlib.channel_rit_get, _Hamlib.channel_rit_set)
    xit = property(_Hamlib.channel_xit_get, _Hamlib.channel_xit_set)
    funcs = property(_Hamlib.channel_funcs_get, _Hamlib.channel_funcs_set)
    levels = property(_Hamlib.channel_levels_get, _Hamlib.channel_levels_set)
    ctcss_tone = property(_Hamlib.channel_ctcss_tone_get, _Hamlib.channel_ctcss_tone_set)
    ctcss_sql = property(_Hamlib.channel_ctcss_sql_get, _Hamlib.channel_ctcss_sql_set)
    dcs_code = property(_Hamlib.channel_dcs_code_get, _Hamlib.channel_dcs_code_set)
    dcs_sql = property(_Hamlib.channel_dcs_sql_get, _Hamlib.channel_dcs_sql_set)
    scan_group = property(_Hamlib.channel_scan_group_get, _Hamlib.channel_scan_group_set)
    flags = property(_Hamlib.channel_flags_get, _Hamlib.channel_flags_set)
    channel_desc = property(_Hamlib.channel_channel_desc_get, _Hamlib.channel_channel_desc_set)
    ext_levels = property(_Hamlib.channel_ext_levels_get, _Hamlib.channel_ext_levels_set)

    def __init__(self, *args):
        _Hamlib.channel_swiginit(self, _Hamlib.new_channel(*args))
    __swig_destroy__ = _Hamlib.delete_channel

# Register channel in _Hamlib:
_Hamlib.channel_swigregister(channel)

class channel_cap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bank_num = property(_Hamlib.channel_cap_bank_num_get, _Hamlib.channel_cap_bank_num_set)
    vfo = property(_Hamlib.channel_cap_vfo_get, _Hamlib.channel_cap_vfo_set)
    ant = property(_Hamlib.channel_cap_ant_get, _Hamlib.channel_cap_ant_set)
    freq = property(_Hamlib.channel_cap_freq_get, _Hamlib.channel_cap_freq_set)
    mode = property(_Hamlib.channel_cap_mode_get, _Hamlib.channel_cap_mode_set)
    width = property(_Hamlib.channel_cap_width_get, _Hamlib.channel_cap_width_set)
    tx_freq = property(_Hamlib.channel_cap_tx_freq_get, _Hamlib.channel_cap_tx_freq_set)
    tx_mode = property(_Hamlib.channel_cap_tx_mode_get, _Hamlib.channel_cap_tx_mode_set)
    tx_width = property(_Hamlib.channel_cap_tx_width_get, _Hamlib.channel_cap_tx_width_set)
    split = property(_Hamlib.channel_cap_split_get, _Hamlib.channel_cap_split_set)
    tx_vfo = property(_Hamlib.channel_cap_tx_vfo_get, _Hamlib.channel_cap_tx_vfo_set)
    rptr_shift = property(_Hamlib.channel_cap_rptr_shift_get, _Hamlib.channel_cap_rptr_shift_set)
    rptr_offs = property(_Hamlib.channel_cap_rptr_offs_get, _Hamlib.channel_cap_rptr_offs_set)
    tuning_step = property(_Hamlib.channel_cap_tuning_step_get, _Hamlib.channel_cap_tuning_step_set)
    rit = property(_Hamlib.channel_cap_rit_get, _Hamlib.channel_cap_rit_set)
    xit = property(_Hamlib.channel_cap_xit_get, _Hamlib.channel_cap_xit_set)
    funcs = property(_Hamlib.channel_cap_funcs_get, _Hamlib.channel_cap_funcs_set)
    levels = property(_Hamlib.channel_cap_levels_get, _Hamlib.channel_cap_levels_set)
    ctcss_tone = property(_Hamlib.channel_cap_ctcss_tone_get, _Hamlib.channel_cap_ctcss_tone_set)
    ctcss_sql = property(_Hamlib.channel_cap_ctcss_sql_get, _Hamlib.channel_cap_ctcss_sql_set)
    dcs_code = property(_Hamlib.channel_cap_dcs_code_get, _Hamlib.channel_cap_dcs_code_set)
    dcs_sql = property(_Hamlib.channel_cap_dcs_sql_get, _Hamlib.channel_cap_dcs_sql_set)
    scan_group = property(_Hamlib.channel_cap_scan_group_get, _Hamlib.channel_cap_scan_group_set)
    flags = property(_Hamlib.channel_cap_flags_get, _Hamlib.channel_cap_flags_set)
    channel_desc = property(_Hamlib.channel_cap_channel_desc_get, _Hamlib.channel_cap_channel_desc_set)
    ext_levels = property(_Hamlib.channel_cap_ext_levels_get, _Hamlib.channel_cap_ext_levels_set)

    def __init__(self):
        _Hamlib.channel_cap_swiginit(self, _Hamlib.new_channel_cap())
    __swig_destroy__ = _Hamlib.delete_channel_cap

# Register channel_cap in _Hamlib:
_Hamlib.channel_cap_swigregister(channel_cap)

RIG_MTYPE_NONE = _Hamlib.RIG_MTYPE_NONE
RIG_MTYPE_MEM = _Hamlib.RIG_MTYPE_MEM
RIG_MTYPE_EDGE = _Hamlib.RIG_MTYPE_EDGE
RIG_MTYPE_CALL = _Hamlib.RIG_MTYPE_CALL
RIG_MTYPE_MEMOPAD = _Hamlib.RIG_MTYPE_MEMOPAD
RIG_MTYPE_SAT = _Hamlib.RIG_MTYPE_SAT
RIG_MTYPE_BAND = _Hamlib.RIG_MTYPE_BAND
RIG_MTYPE_PRIO = _Hamlib.RIG_MTYPE_PRIO
class chan_list(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    startc = property(_Hamlib.chan_list_startc_get, _Hamlib.chan_list_startc_set)
    endc = property(_Hamlib.chan_list_endc_get, _Hamlib.chan_list_endc_set)
    type = property(_Hamlib.chan_list_type_get, _Hamlib.chan_list_type_set)
    mem_caps = property(_Hamlib.chan_list_mem_caps_get, _Hamlib.chan_list_mem_caps_set)

    def __init__(self):
        _Hamlib.chan_list_swiginit(self, _Hamlib.new_chan_list())
    __swig_destroy__ = _Hamlib.delete_chan_list

# Register chan_list in _Hamlib:
_Hamlib.chan_list_swigregister(chan_list)

RIG_MEM_CAPS_ALL = _Hamlib.RIG_MEM_CAPS_ALL
class gran(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    min = property(_Hamlib.gran_min_get, _Hamlib.gran_min_set)
    max = property(_Hamlib.gran_max_get, _Hamlib.gran_max_set)
    step = property(_Hamlib.gran_step_get, _Hamlib.gran_step_set)

    def __init__(self):
        _Hamlib.gran_swiginit(self, _Hamlib.new_gran())
    __swig_destroy__ = _Hamlib.delete_gran

# Register gran in _Hamlib:
_Hamlib.gran_swigregister(gran)

class cal_table(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    size = property(_Hamlib.cal_table_size_get, _Hamlib.cal_table_size_set)
    table = property(_Hamlib.cal_table_table_get)

    def __init__(self):
        _Hamlib.cal_table_swiginit(self, _Hamlib.new_cal_table())
    __swig_destroy__ = _Hamlib.delete_cal_table

# Register cal_table in _Hamlib:
_Hamlib.cal_table_swigregister(cal_table)

class cal_table_table(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    raw = property(_Hamlib.cal_table_table_raw_get, _Hamlib.cal_table_table_raw_set)
    val = property(_Hamlib.cal_table_table_val_get, _Hamlib.cal_table_table_val_set)

    def __init__(self):
        _Hamlib.cal_table_table_swiginit(self, _Hamlib.new_cal_table_table())
    __swig_destroy__ = _Hamlib.delete_cal_table_table

# Register cal_table_table in _Hamlib:
_Hamlib.cal_table_table_swigregister(cal_table_table)

class cal_table_float(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    size = property(_Hamlib.cal_table_float_size_get, _Hamlib.cal_table_float_size_set)
    table = property(_Hamlib.cal_table_float_table_get)

    def __init__(self):
        _Hamlib.cal_table_float_swiginit(self, _Hamlib.new_cal_table_float())
    __swig_destroy__ = _Hamlib.delete_cal_table_float

# Register cal_table_float in _Hamlib:
_Hamlib.cal_table_float_swigregister(cal_table_float)

class cal_table_float_table(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    raw = property(_Hamlib.cal_table_float_table_raw_get, _Hamlib.cal_table_float_table_raw_set)
    val = property(_Hamlib.cal_table_float_table_val_get, _Hamlib.cal_table_float_table_val_set)

    def __init__(self):
        _Hamlib.cal_table_float_table_swiginit(self, _Hamlib.new_cal_table_float_table())
    __swig_destroy__ = _Hamlib.delete_cal_table_float_table

# Register cal_table_float_table in _Hamlib:
_Hamlib.cal_table_float_table_swigregister(cal_table_float_table)

class rig_spectrum_scope(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_Hamlib.rig_spectrum_scope_id_get, _Hamlib.rig_spectrum_scope_id_set)
    name = property(_Hamlib.rig_spectrum_scope_name_get, _Hamlib.rig_spectrum_scope_name_set)

    def __init__(self):
        _Hamlib.rig_spectrum_scope_swiginit(self, _Hamlib.new_rig_spectrum_scope())
    __swig_destroy__ = _Hamlib.delete_rig_spectrum_scope

# Register rig_spectrum_scope in _Hamlib:
_Hamlib.rig_spectrum_scope_swigregister(rig_spectrum_scope)

RIG_SPECTRUM_MODE_NONE = _Hamlib.RIG_SPECTRUM_MODE_NONE
RIG_SPECTRUM_MODE_CENTER = _Hamlib.RIG_SPECTRUM_MODE_CENTER
RIG_SPECTRUM_MODE_FIXED = _Hamlib.RIG_SPECTRUM_MODE_FIXED
RIG_SPECTRUM_MODE_CENTER_SCROLL = _Hamlib.RIG_SPECTRUM_MODE_CENTER_SCROLL
RIG_SPECTRUM_MODE_FIXED_SCROLL = _Hamlib.RIG_SPECTRUM_MODE_FIXED_SCROLL
class rig_spectrum_avg_mode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_Hamlib.rig_spectrum_avg_mode_id_get, _Hamlib.rig_spectrum_avg_mode_id_set)
    name = property(_Hamlib.rig_spectrum_avg_mode_name_get, _Hamlib.rig_spectrum_avg_mode_name_set)

    def __init__(self):
        _Hamlib.rig_spectrum_avg_mode_swiginit(self, _Hamlib.new_rig_spectrum_avg_mode())
    __swig_destroy__ = _Hamlib.delete_rig_spectrum_avg_mode

# Register rig_spectrum_avg_mode in _Hamlib:
_Hamlib.rig_spectrum_avg_mode_swigregister(rig_spectrum_avg_mode)

class rig_spectrum_line(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_Hamlib.rig_spectrum_line_id_get, _Hamlib.rig_spectrum_line_id_set)
    data_level_min = property(_Hamlib.rig_spectrum_line_data_level_min_get, _Hamlib.rig_spectrum_line_data_level_min_set)
    data_level_max = property(_Hamlib.rig_spectrum_line_data_level_max_get, _Hamlib.rig_spectrum_line_data_level_max_set)
    signal_strength_min = property(_Hamlib.rig_spectrum_line_signal_strength_min_get, _Hamlib.rig_spectrum_line_signal_strength_min_set)
    signal_strength_max = property(_Hamlib.rig_spectrum_line_signal_strength_max_get, _Hamlib.rig_spectrum_line_signal_strength_max_set)
    spectrum_mode = property(_Hamlib.rig_spectrum_line_spectrum_mode_get, _Hamlib.rig_spectrum_line_spectrum_mode_set)
    center_freq = property(_Hamlib.rig_spectrum_line_center_freq_get, _Hamlib.rig_spectrum_line_center_freq_set)
    span_freq = property(_Hamlib.rig_spectrum_line_span_freq_get, _Hamlib.rig_spectrum_line_span_freq_set)
    low_edge_freq = property(_Hamlib.rig_spectrum_line_low_edge_freq_get, _Hamlib.rig_spectrum_line_low_edge_freq_set)
    high_edge_freq = property(_Hamlib.rig_spectrum_line_high_edge_freq_get, _Hamlib.rig_spectrum_line_high_edge_freq_set)
    spectrum_data_length = property(_Hamlib.rig_spectrum_line_spectrum_data_length_get, _Hamlib.rig_spectrum_line_spectrum_data_length_set)
    spectrum_data = property(_Hamlib.rig_spectrum_line_spectrum_data_get, _Hamlib.rig_spectrum_line_spectrum_data_set)

    def __init__(self):
        _Hamlib.rig_spectrum_line_swiginit(self, _Hamlib.new_rig_spectrum_line())
    __swig_destroy__ = _Hamlib.delete_rig_spectrum_line

# Register rig_spectrum_line in _Hamlib:
_Hamlib.rig_spectrum_line_swigregister(rig_spectrum_line)

class rig_caps(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    rig_model = property(_Hamlib.rig_caps_rig_model_get, _Hamlib.rig_caps_rig_model_set)
    model_name = property(_Hamlib.rig_caps_model_name_get)
    mfg_name = property(_Hamlib.rig_caps_mfg_name_get)
    version = property(_Hamlib.rig_caps_version_get)
    copyright = property(_Hamlib.rig_caps_copyright_get)
    status = property(_Hamlib.rig_caps_status_get, _Hamlib.rig_caps_status_set)
    rig_type = property(_Hamlib.rig_caps_rig_type_get, _Hamlib.rig_caps_rig_type_set)
    ptt_type = property(_Hamlib.rig_caps_ptt_type_get, _Hamlib.rig_caps_ptt_type_set)
    dcd_type = property(_Hamlib.rig_caps_dcd_type_get, _Hamlib.rig_caps_dcd_type_set)
    port_type = property(_Hamlib.rig_caps_port_type_get, _Hamlib.rig_caps_port_type_set)
    serial_rate_min = property(_Hamlib.rig_caps_serial_rate_min_get, _Hamlib.rig_caps_serial_rate_min_set)
    serial_rate_max = property(_Hamlib.rig_caps_serial_rate_max_get, _Hamlib.rig_caps_serial_rate_max_set)
    serial_data_bits = property(_Hamlib.rig_caps_serial_data_bits_get, _Hamlib.rig_caps_serial_data_bits_set)
    serial_stop_bits = property(_Hamlib.rig_caps_serial_stop_bits_get, _Hamlib.rig_caps_serial_stop_bits_set)
    serial_parity = property(_Hamlib.rig_caps_serial_parity_get, _Hamlib.rig_caps_serial_parity_set)
    serial_handshake = property(_Hamlib.rig_caps_serial_handshake_get, _Hamlib.rig_caps_serial_handshake_set)
    write_delay = property(_Hamlib.rig_caps_write_delay_get, _Hamlib.rig_caps_write_delay_set)
    post_write_delay = property(_Hamlib.rig_caps_post_write_delay_get, _Hamlib.rig_caps_post_write_delay_set)
    timeout = property(_Hamlib.rig_caps_timeout_get, _Hamlib.rig_caps_timeout_set)
    retry = property(_Hamlib.rig_caps_retry_get, _Hamlib.rig_caps_retry_set)
    has_get_func = property(_Hamlib.rig_caps_has_get_func_get, _Hamlib.rig_caps_has_get_func_set)
    has_set_func = property(_Hamlib.rig_caps_has_set_func_get, _Hamlib.rig_caps_has_set_func_set)
    has_get_level = property(_Hamlib.rig_caps_has_get_level_get, _Hamlib.rig_caps_has_get_level_set)
    has_set_level = property(_Hamlib.rig_caps_has_set_level_get, _Hamlib.rig_caps_has_set_level_set)
    has_get_parm = property(_Hamlib.rig_caps_has_get_parm_get, _Hamlib.rig_caps_has_get_parm_set)
    has_set_parm = property(_Hamlib.rig_caps_has_set_parm_get, _Hamlib.rig_caps_has_set_parm_set)
    level_gran = property(_Hamlib.rig_caps_level_gran_get, _Hamlib.rig_caps_level_gran_set)
    parm_gran = property(_Hamlib.rig_caps_parm_gran_get, _Hamlib.rig_caps_parm_gran_set)
    extparms = property(_Hamlib.rig_caps_extparms_get, _Hamlib.rig_caps_extparms_set)
    extlevels = property(_Hamlib.rig_caps_extlevels_get, _Hamlib.rig_caps_extlevels_set)
    extfuncs = property(_Hamlib.rig_caps_extfuncs_get, _Hamlib.rig_caps_extfuncs_set)
    ext_tokens = property(_Hamlib.rig_caps_ext_tokens_get, _Hamlib.rig_caps_ext_tokens_set)
    ctcss_list = property(_Hamlib.rig_caps_ctcss_list_get, _Hamlib.rig_caps_ctcss_list_set)
    dcs_list = property(_Hamlib.rig_caps_dcs_list_get, _Hamlib.rig_caps_dcs_list_set)
    preamp = property(_Hamlib.rig_caps_preamp_get, _Hamlib.rig_caps_preamp_set)
    attenuator = property(_Hamlib.rig_caps_attenuator_get, _Hamlib.rig_caps_attenuator_set)
    max_rit = property(_Hamlib.rig_caps_max_rit_get, _Hamlib.rig_caps_max_rit_set)
    max_xit = property(_Hamlib.rig_caps_max_xit_get, _Hamlib.rig_caps_max_xit_set)
    max_ifshift = property(_Hamlib.rig_caps_max_ifshift_get, _Hamlib.rig_caps_max_ifshift_set)
    agc_level_count = property(_Hamlib.rig_caps_agc_level_count_get, _Hamlib.rig_caps_agc_level_count_set)
    agc_levels = property(_Hamlib.rig_caps_agc_levels_get, _Hamlib.rig_caps_agc_levels_set)
    announces = property(_Hamlib.rig_caps_announces_get, _Hamlib.rig_caps_announces_set)
    vfo_ops = property(_Hamlib.rig_caps_vfo_ops_get, _Hamlib.rig_caps_vfo_ops_set)
    scan_ops = property(_Hamlib.rig_caps_scan_ops_get, _Hamlib.rig_caps_scan_ops_set)
    targetable_vfo = property(_Hamlib.rig_caps_targetable_vfo_get, _Hamlib.rig_caps_targetable_vfo_set)
    transceive = property(_Hamlib.rig_caps_transceive_get, _Hamlib.rig_caps_transceive_set)
    bank_qty = property(_Hamlib.rig_caps_bank_qty_get, _Hamlib.rig_caps_bank_qty_set)
    chan_desc_sz = property(_Hamlib.rig_caps_chan_desc_sz_get, _Hamlib.rig_caps_chan_desc_sz_set)
    chan_list = property(_Hamlib.rig_caps_chan_list_get, _Hamlib.rig_caps_chan_list_set)
    rx_range_list1 = property(_Hamlib.rig_caps_rx_range_list1_get, _Hamlib.rig_caps_rx_range_list1_set)
    tx_range_list1 = property(_Hamlib.rig_caps_tx_range_list1_get, _Hamlib.rig_caps_tx_range_list1_set)
    rx_range_list2 = property(_Hamlib.rig_caps_rx_range_list2_get, _Hamlib.rig_caps_rx_range_list2_set)
    tx_range_list2 = property(_Hamlib.rig_caps_tx_range_list2_get, _Hamlib.rig_caps_tx_range_list2_set)
    rx_range_list3 = property(_Hamlib.rig_caps_rx_range_list3_get, _Hamlib.rig_caps_rx_range_list3_set)
    tx_range_list3 = property(_Hamlib.rig_caps_tx_range_list3_get, _Hamlib.rig_caps_tx_range_list3_set)
    rx_range_list4 = property(_Hamlib.rig_caps_rx_range_list4_get, _Hamlib.rig_caps_rx_range_list4_set)
    tx_range_list4 = property(_Hamlib.rig_caps_tx_range_list4_get, _Hamlib.rig_caps_tx_range_list4_set)
    rx_range_list5 = property(_Hamlib.rig_caps_rx_range_list5_get, _Hamlib.rig_caps_rx_range_list5_set)
    tx_range_list5 = property(_Hamlib.rig_caps_tx_range_list5_get, _Hamlib.rig_caps_tx_range_list5_set)
    tuning_steps = property(_Hamlib.rig_caps_tuning_steps_get, _Hamlib.rig_caps_tuning_steps_set)
    filters = property(_Hamlib.rig_caps_filters_get, _Hamlib.rig_caps_filters_set)
    str_cal = property(_Hamlib.rig_caps_str_cal_get, _Hamlib.rig_caps_str_cal_set)
    swr_cal = property(_Hamlib.rig_caps_swr_cal_get, _Hamlib.rig_caps_swr_cal_set)
    alc_cal = property(_Hamlib.rig_caps_alc_cal_get, _Hamlib.rig_caps_alc_cal_set)
    rfpower_meter_cal = property(_Hamlib.rig_caps_rfpower_meter_cal_get, _Hamlib.rig_caps_rfpower_meter_cal_set)
    comp_meter_cal = property(_Hamlib.rig_caps_comp_meter_cal_get, _Hamlib.rig_caps_comp_meter_cal_set)
    vd_meter_cal = property(_Hamlib.rig_caps_vd_meter_cal_get, _Hamlib.rig_caps_vd_meter_cal_set)
    id_meter_cal = property(_Hamlib.rig_caps_id_meter_cal_get, _Hamlib.rig_caps_id_meter_cal_set)
    spectrum_scopes = property(_Hamlib.rig_caps_spectrum_scopes_get, _Hamlib.rig_caps_spectrum_scopes_set)
    spectrum_modes = property(_Hamlib.rig_caps_spectrum_modes_get, _Hamlib.rig_caps_spectrum_modes_set)
    spectrum_spans = property(_Hamlib.rig_caps_spectrum_spans_get, _Hamlib.rig_caps_spectrum_spans_set)
    spectrum_avg_modes = property(_Hamlib.rig_caps_spectrum_avg_modes_get, _Hamlib.rig_caps_spectrum_avg_modes_set)
    spectrum_attenuator = property(_Hamlib.rig_caps_spectrum_attenuator_get, _Hamlib.rig_caps_spectrum_attenuator_set)
    cfgparams = property(_Hamlib.rig_caps_cfgparams_get, _Hamlib.rig_caps_cfgparams_set)
    priv = property(_Hamlib.rig_caps_priv_get, _Hamlib.rig_caps_priv_set)
    rig_init = property(_Hamlib.rig_caps_rig_init_get, _Hamlib.rig_caps_rig_init_set)
    set_freq = property(_Hamlib.rig_caps_set_freq_get, _Hamlib.rig_caps_set_freq_set)
    get_freq = property(_Hamlib.rig_caps_get_freq_get, _Hamlib.rig_caps_get_freq_set)
    set_mode = property(_Hamlib.rig_caps_set_mode_get, _Hamlib.rig_caps_set_mode_set)
    get_mode = property(_Hamlib.rig_caps_get_mode_get, _Hamlib.rig_caps_get_mode_set)
    set_vfo = property(_Hamlib.rig_caps_set_vfo_get, _Hamlib.rig_caps_set_vfo_set)
    get_vfo = property(_Hamlib.rig_caps_get_vfo_get, _Hamlib.rig_caps_get_vfo_set)
    set_ptt = property(_Hamlib.rig_caps_set_ptt_get, _Hamlib.rig_caps_set_ptt_set)
    get_ptt = property(_Hamlib.rig_caps_get_ptt_get, _Hamlib.rig_caps_get_ptt_set)
    get_dcd = property(_Hamlib.rig_caps_get_dcd_get, _Hamlib.rig_caps_get_dcd_set)
    set_rptr_shift = property(_Hamlib.rig_caps_set_rptr_shift_get, _Hamlib.rig_caps_set_rptr_shift_set)
    get_rptr_shift = property(_Hamlib.rig_caps_get_rptr_shift_get, _Hamlib.rig_caps_get_rptr_shift_set)
    set_rptr_offs = property(_Hamlib.rig_caps_set_rptr_offs_get, _Hamlib.rig_caps_set_rptr_offs_set)
    get_rptr_offs = property(_Hamlib.rig_caps_get_rptr_offs_get, _Hamlib.rig_caps_get_rptr_offs_set)
    set_split_freq = property(_Hamlib.rig_caps_set_split_freq_get, _Hamlib.rig_caps_set_split_freq_set)
    get_split_freq = property(_Hamlib.rig_caps_get_split_freq_get, _Hamlib.rig_caps_get_split_freq_set)
    set_split_mode = property(_Hamlib.rig_caps_set_split_mode_get, _Hamlib.rig_caps_set_split_mode_set)
    get_split_mode = property(_Hamlib.rig_caps_get_split_mode_get, _Hamlib.rig_caps_get_split_mode_set)
    set_split_freq_mode = property(_Hamlib.rig_caps_set_split_freq_mode_get, _Hamlib.rig_caps_set_split_freq_mode_set)
    get_split_freq_mode = property(_Hamlib.rig_caps_get_split_freq_mode_get, _Hamlib.rig_caps_get_split_freq_mode_set)
    set_split_vfo = property(_Hamlib.rig_caps_set_split_vfo_get, _Hamlib.rig_caps_set_split_vfo_set)
    get_split_vfo = property(_Hamlib.rig_caps_get_split_vfo_get, _Hamlib.rig_caps_get_split_vfo_set)
    set_rit = property(_Hamlib.rig_caps_set_rit_get, _Hamlib.rig_caps_set_rit_set)
    get_rit = property(_Hamlib.rig_caps_get_rit_get, _Hamlib.rig_caps_get_rit_set)
    set_xit = property(_Hamlib.rig_caps_set_xit_get, _Hamlib.rig_caps_set_xit_set)
    get_xit = property(_Hamlib.rig_caps_get_xit_get, _Hamlib.rig_caps_get_xit_set)
    set_ts = property(_Hamlib.rig_caps_set_ts_get, _Hamlib.rig_caps_set_ts_set)
    get_ts = property(_Hamlib.rig_caps_get_ts_get, _Hamlib.rig_caps_get_ts_set)
    set_dcs_code = property(_Hamlib.rig_caps_set_dcs_code_get, _Hamlib.rig_caps_set_dcs_code_set)
    get_dcs_code = property(_Hamlib.rig_caps_get_dcs_code_get, _Hamlib.rig_caps_get_dcs_code_set)
    set_tone = property(_Hamlib.rig_caps_set_tone_get, _Hamlib.rig_caps_set_tone_set)
    get_tone = property(_Hamlib.rig_caps_get_tone_get, _Hamlib.rig_caps_get_tone_set)
    set_ctcss_tone = property(_Hamlib.rig_caps_set_ctcss_tone_get, _Hamlib.rig_caps_set_ctcss_tone_set)
    get_ctcss_tone = property(_Hamlib.rig_caps_get_ctcss_tone_get, _Hamlib.rig_caps_get_ctcss_tone_set)
    set_dcs_sql = property(_Hamlib.rig_caps_set_dcs_sql_get, _Hamlib.rig_caps_set_dcs_sql_set)
    get_dcs_sql = property(_Hamlib.rig_caps_get_dcs_sql_get, _Hamlib.rig_caps_get_dcs_sql_set)
    set_tone_sql = property(_Hamlib.rig_caps_set_tone_sql_get, _Hamlib.rig_caps_set_tone_sql_set)
    get_tone_sql = property(_Hamlib.rig_caps_get_tone_sql_get, _Hamlib.rig_caps_get_tone_sql_set)
    set_ctcss_sql = property(_Hamlib.rig_caps_set_ctcss_sql_get, _Hamlib.rig_caps_set_ctcss_sql_set)
    get_ctcss_sql = property(_Hamlib.rig_caps_get_ctcss_sql_get, _Hamlib.rig_caps_get_ctcss_sql_set)
    power2mW = property(_Hamlib.rig_caps_power2mW_get, _Hamlib.rig_caps_power2mW_set)
    mW2power = property(_Hamlib.rig_caps_mW2power_get, _Hamlib.rig_caps_mW2power_set)
    set_powerstat = property(_Hamlib.rig_caps_set_powerstat_get, _Hamlib.rig_caps_set_powerstat_set)
    get_powerstat = property(_Hamlib.rig_caps_get_powerstat_get, _Hamlib.rig_caps_get_powerstat_set)
    reset = property(_Hamlib.rig_caps_reset_get, _Hamlib.rig_caps_reset_set)
    set_ant = property(_Hamlib.rig_caps_set_ant_get, _Hamlib.rig_caps_set_ant_set)
    get_ant = property(_Hamlib.rig_caps_get_ant_get, _Hamlib.rig_caps_get_ant_set)
    set_level = property(_Hamlib.rig_caps_set_level_get, _Hamlib.rig_caps_set_level_set)
    get_level = property(_Hamlib.rig_caps_get_level_get, _Hamlib.rig_caps_get_level_set)
    set_func = property(_Hamlib.rig_caps_set_func_get, _Hamlib.rig_caps_set_func_set)
    get_func = property(_Hamlib.rig_caps_get_func_get, _Hamlib.rig_caps_get_func_set)
    set_parm = property(_Hamlib.rig_caps_set_parm_get, _Hamlib.rig_caps_set_parm_set)
    get_parm = property(_Hamlib.rig_caps_get_parm_get, _Hamlib.rig_caps_get_parm_set)
    set_ext_level = property(_Hamlib.rig_caps_set_ext_level_get, _Hamlib.rig_caps_set_ext_level_set)
    get_ext_level = property(_Hamlib.rig_caps_get_ext_level_get, _Hamlib.rig_caps_get_ext_level_set)
    set_ext_func = property(_Hamlib.rig_caps_set_ext_func_get, _Hamlib.rig_caps_set_ext_func_set)
    get_ext_func = property(_Hamlib.rig_caps_get_ext_func_get, _Hamlib.rig_caps_get_ext_func_set)
    set_ext_parm = property(_Hamlib.rig_caps_set_ext_parm_get, _Hamlib.rig_caps_set_ext_parm_set)
    get_ext_parm = property(_Hamlib.rig_caps_get_ext_parm_get, _Hamlib.rig_caps_get_ext_parm_set)
    set_conf = property(_Hamlib.rig_caps_set_conf_get, _Hamlib.rig_caps_set_conf_set)
    get_conf = property(_Hamlib.rig_caps_get_conf_get, _Hamlib.rig_caps_get_conf_set)
    send_dtmf = property(_Hamlib.rig_caps_send_dtmf_get, _Hamlib.rig_caps_send_dtmf_set)
    recv_dtmf = property(_Hamlib.rig_caps_recv_dtmf_get, _Hamlib.rig_caps_recv_dtmf_set)
    send_morse = property(_Hamlib.rig_caps_send_morse_get, _Hamlib.rig_caps_send_morse_set)
    stop_morse = property(_Hamlib.rig_caps_stop_morse_get, _Hamlib.rig_caps_stop_morse_set)
    wait_morse = property(_Hamlib.rig_caps_wait_morse_get, _Hamlib.rig_caps_wait_morse_set)
    send_voice_mem = property(_Hamlib.rig_caps_send_voice_mem_get, _Hamlib.rig_caps_send_voice_mem_set)
    set_bank = property(_Hamlib.rig_caps_set_bank_get, _Hamlib.rig_caps_set_bank_set)
    set_mem = property(_Hamlib.rig_caps_set_mem_get, _Hamlib.rig_caps_set_mem_set)
    get_mem = property(_Hamlib.rig_caps_get_mem_get, _Hamlib.rig_caps_get_mem_set)
    vfo_op = property(_Hamlib.rig_caps_vfo_op_get, _Hamlib.rig_caps_vfo_op_set)
    scan = property(_Hamlib.rig_caps_scan_get, _Hamlib.rig_caps_scan_set)
    set_trn = property(_Hamlib.rig_caps_set_trn_get, _Hamlib.rig_caps_set_trn_set)
    get_trn = property(_Hamlib.rig_caps_get_trn_get, _Hamlib.rig_caps_get_trn_set)
    decode_event = property(_Hamlib.rig_caps_decode_event_get, _Hamlib.rig_caps_decode_event_set)
    set_channel = property(_Hamlib.rig_caps_set_channel_get, _Hamlib.rig_caps_set_channel_set)
    get_channel = property(_Hamlib.rig_caps_get_channel_get, _Hamlib.rig_caps_get_channel_set)
    get_info = property(_Hamlib.rig_caps_get_info_get, _Hamlib.rig_caps_get_info_set)
    set_chan_all_cb = property(_Hamlib.rig_caps_set_chan_all_cb_get, _Hamlib.rig_caps_set_chan_all_cb_set)
    get_chan_all_cb = property(_Hamlib.rig_caps_get_chan_all_cb_get, _Hamlib.rig_caps_get_chan_all_cb_set)
    set_mem_all_cb = property(_Hamlib.rig_caps_set_mem_all_cb_get, _Hamlib.rig_caps_set_mem_all_cb_set)
    get_mem_all_cb = property(_Hamlib.rig_caps_get_mem_all_cb_get, _Hamlib.rig_caps_get_mem_all_cb_set)
    set_vfo_opt = property(_Hamlib.rig_caps_set_vfo_opt_get, _Hamlib.rig_caps_set_vfo_opt_set)
    set_clock = property(_Hamlib.rig_caps_set_clock_get, _Hamlib.rig_caps_set_clock_set)
    get_clock = property(_Hamlib.rig_caps_get_clock_get, _Hamlib.rig_caps_get_clock_set)
    clone_combo_set = property(_Hamlib.rig_caps_clone_combo_set_get)
    clone_combo_get = property(_Hamlib.rig_caps_clone_combo_get_get)

    def __init__(self):
        _Hamlib.rig_caps_swiginit(self, _Hamlib.new_rig_caps())
    __swig_destroy__ = _Hamlib.delete_rig_caps

# Register rig_caps in _Hamlib:
_Hamlib.rig_caps_swigregister(rig_caps)

RIG_FUNCTION_INIT = _Hamlib.RIG_FUNCTION_INIT
RIG_FUNCTION_CLEANUP = _Hamlib.RIG_FUNCTION_CLEANUP
RIG_FUNCTION_OPEN = _Hamlib.RIG_FUNCTION_OPEN
RIG_FUNCTION_CLOSE = _Hamlib.RIG_FUNCTION_CLOSE
RIG_FUNCTION_SET_FREQ = _Hamlib.RIG_FUNCTION_SET_FREQ
RIG_FUNCTION_GET_FREQ = _Hamlib.RIG_FUNCTION_GET_FREQ
RIG_FUNCTION_SET_MODE = _Hamlib.RIG_FUNCTION_SET_MODE
RIG_FUNCTION_GET_MODE = _Hamlib.RIG_FUNCTION_GET_MODE
RIG_FUNCTION_SET_VFO = _Hamlib.RIG_FUNCTION_SET_VFO
RIG_FUNCTION_GET_VFO = _Hamlib.RIG_FUNCTION_GET_VFO
RIG_FUNCTION_SET_PTT = _Hamlib.RIG_FUNCTION_SET_PTT
RIG_FUNCTION_GET_PTT = _Hamlib.RIG_FUNCTION_GET_PTT
RIG_FUNCTION_GET_DCD = _Hamlib.RIG_FUNCTION_GET_DCD
RIG_FUNCTION_SET_RPTR_SHIFT = _Hamlib.RIG_FUNCTION_SET_RPTR_SHIFT
RIG_FUNCTION_GET_RPTR_SHIFT = _Hamlib.RIG_FUNCTION_GET_RPTR_SHIFT
RIG_FUNCTION_SET_RPTR_OFFS = _Hamlib.RIG_FUNCTION_SET_RPTR_OFFS
RIG_FUNCTION_GET_RPTR_OFFS = _Hamlib.RIG_FUNCTION_GET_RPTR_OFFS
RIG_FUNCTION_SET_SPLIT_FREQ = _Hamlib.RIG_FUNCTION_SET_SPLIT_FREQ
RIG_FUNCTION_GET_SPLIT_FREQ = _Hamlib.RIG_FUNCTION_GET_SPLIT_FREQ
RIG_FUNCTION_SET_SPLIT_MODE = _Hamlib.RIG_FUNCTION_SET_SPLIT_MODE
RIG_FUNCTION_SET_SPLIT_FREQ_MODE = _Hamlib.RIG_FUNCTION_SET_SPLIT_FREQ_MODE
RIG_FUNCTION_GET_SPLIT_FREQ_MODE = _Hamlib.RIG_FUNCTION_GET_SPLIT_FREQ_MODE
RIG_FUNCTION_SET_SPLIT_VFO = _Hamlib.RIG_FUNCTION_SET_SPLIT_VFO
RIG_FUNCTION_GET_SPLIT_VFO = _Hamlib.RIG_FUNCTION_GET_SPLIT_VFO
RIG_FUNCTION_SET_RIT = _Hamlib.RIG_FUNCTION_SET_RIT
RIG_FUNCTION_GET_RIT = _Hamlib.RIG_FUNCTION_GET_RIT
RIG_FUNCTION_SET_XIT = _Hamlib.RIG_FUNCTION_SET_XIT
RIG_FUNCTION_GET_XIT = _Hamlib.RIG_FUNCTION_GET_XIT
RIG_FUNCTION_SET_TS = _Hamlib.RIG_FUNCTION_SET_TS
RIG_FUNCTION_GET_TS = _Hamlib.RIG_FUNCTION_GET_TS
RIG_FUNCTION_SET_DCS_CODE = _Hamlib.RIG_FUNCTION_SET_DCS_CODE
RIG_FUNCTION_GET_DCS_CODE = _Hamlib.RIG_FUNCTION_GET_DCS_CODE
RIG_FUNCTION_SET_TONE = _Hamlib.RIG_FUNCTION_SET_TONE
RIG_FUNCTION_GET_TONE = _Hamlib.RIG_FUNCTION_GET_TONE
RIG_FUNCTION_SET_CTCSS_TONE = _Hamlib.RIG_FUNCTION_SET_CTCSS_TONE
RIG_FUNCTION_GET_CTCSS_TONE = _Hamlib.RIG_FUNCTION_GET_CTCSS_TONE
RIG_FUNCTION_SET_DCS_SQL = _Hamlib.RIG_FUNCTION_SET_DCS_SQL
RIG_FUNCTION_GET_DCS_SQL = _Hamlib.RIG_FUNCTION_GET_DCS_SQL
RIG_FUNCTION_SET_TONE_SQL = _Hamlib.RIG_FUNCTION_SET_TONE_SQL
RIG_FUNCTION_GET_TONE_SQL = _Hamlib.RIG_FUNCTION_GET_TONE_SQL
RIG_FUNCTION_SET_CTCSS_SQL = _Hamlib.RIG_FUNCTION_SET_CTCSS_SQL
RIG_FUNCTION_GET_CTCSS_SQL = _Hamlib.RIG_FUNCTION_GET_CTCSS_SQL
RIG_FUNCTION_POWER2MW = _Hamlib.RIG_FUNCTION_POWER2MW
RIG_FUNCTION_MW2POWER = _Hamlib.RIG_FUNCTION_MW2POWER
RIG_FUNCTION_SET_POWERSTAT = _Hamlib.RIG_FUNCTION_SET_POWERSTAT
RIG_FUNCTION_GET_POWERSTAT = _Hamlib.RIG_FUNCTION_GET_POWERSTAT
RIG_FUNCTION_RESET = _Hamlib.RIG_FUNCTION_RESET
RIG_FUNCTION_SET_ANT = _Hamlib.RIG_FUNCTION_SET_ANT
RIG_FUNCTION_GET_ANT = _Hamlib.RIG_FUNCTION_GET_ANT
RIG_FUNCTION_SET_LEVEL = _Hamlib.RIG_FUNCTION_SET_LEVEL
RIG_FUNCTION_GET_LEVEL = _Hamlib.RIG_FUNCTION_GET_LEVEL
RIG_FUNCTION_SET_FUNC = _Hamlib.RIG_FUNCTION_SET_FUNC
RIG_FUNCTION_GET_FUNC = _Hamlib.RIG_FUNCTION_GET_FUNC
RIG_FUNCTION_SET_PARM = _Hamlib.RIG_FUNCTION_SET_PARM
RIG_FUNCTION_GET_PARM = _Hamlib.RIG_FUNCTION_GET_PARM
RIG_FUNCTION_SET_EXT_LEVEL = _Hamlib.RIG_FUNCTION_SET_EXT_LEVEL
RIG_FUNCTION_GET_EXT_LEVEL = _Hamlib.RIG_FUNCTION_GET_EXT_LEVEL
RIG_FUNCTION_SET_EXT_FUNC = _Hamlib.RIG_FUNCTION_SET_EXT_FUNC
RIG_FUNCTION_GET_EXT_FUNC = _Hamlib.RIG_FUNCTION_GET_EXT_FUNC
RIG_FUNCTION_SET_EXT_PARM = _Hamlib.RIG_FUNCTION_SET_EXT_PARM
RIG_FUNCTION_GET_EXT_PARM = _Hamlib.RIG_FUNCTION_GET_EXT_PARM
RIG_FUNCTION_SET_CONF = _Hamlib.RIG_FUNCTION_SET_CONF
RIG_FUNCTION_GET_CONF = _Hamlib.RIG_FUNCTION_GET_CONF
RIG_FUNCTION_SEND_DTMF = _Hamlib.RIG_FUNCTION_SEND_DTMF
RIG_FUNCTION_SEND_MORSE = _Hamlib.RIG_FUNCTION_SEND_MORSE
RIG_FUNCTION_STOP_MORSE = _Hamlib.RIG_FUNCTION_STOP_MORSE
RIG_FUNCTION_WAIT_MORSE = _Hamlib.RIG_FUNCTION_WAIT_MORSE
RIG_FUNCTION_SET_BANK = _Hamlib.RIG_FUNCTION_SET_BANK
RIG_FUNCTION_SET_MEM = _Hamlib.RIG_FUNCTION_SET_MEM
RIG_FUNCTION_GET_MEM = _Hamlib.RIG_FUNCTION_GET_MEM
RIG_FUNCTION_VFO_OP = _Hamlib.RIG_FUNCTION_VFO_OP
RIG_FUNCTION_SCAN = _Hamlib.RIG_FUNCTION_SCAN
RIG_FUNCTION_SET_TRN = _Hamlib.RIG_FUNCTION_SET_TRN
RIG_FUNCTION_GET_TRN = _Hamlib.RIG_FUNCTION_GET_TRN
RIG_FUNCTION_DECODE_EVENT = _Hamlib.RIG_FUNCTION_DECODE_EVENT
RIG_FUNCTION_SET_CHANNEL = _Hamlib.RIG_FUNCTION_SET_CHANNEL
RIG_FUNCTION_GET_CHANNEL = _Hamlib.RIG_FUNCTION_GET_CHANNEL
RIG_FUNCTION_GET_INFO = _Hamlib.RIG_FUNCTION_GET_INFO
RIG_FUNCTION_SET_CHAN_ALL_CB = _Hamlib.RIG_FUNCTION_SET_CHAN_ALL_CB
RIG_FUNCTION_GET_CHAN_ALL_CB = _Hamlib.RIG_FUNCTION_GET_CHAN_ALL_CB
RIG_FUNCTION_SET_MEM_ALL_CB = _Hamlib.RIG_FUNCTION_SET_MEM_ALL_CB
RIG_FUNCTION_GET_MEM_ALL_CB = _Hamlib.RIG_FUNCTION_GET_MEM_ALL_CB
RIG_FUNCTION_SET_VFO_OPT = _Hamlib.RIG_FUNCTION_SET_VFO_OPT

def rig_get_function_ptr(rig_model, rig_function):
    return _Hamlib.rig_get_function_ptr(rig_model, rig_function)
RIG_CAPS_TARGETABLE_VFO = _Hamlib.RIG_CAPS_TARGETABLE_VFO
RIG_CAPS_RIG_MODEL = _Hamlib.RIG_CAPS_RIG_MODEL
RIG_CAPS_PORT_TYPE = _Hamlib.RIG_CAPS_PORT_TYPE
RIG_CAPS_PTT_TYPE = _Hamlib.RIG_CAPS_PTT_TYPE
RIG_CAPS_HAS_GET_LEVEL = _Hamlib.RIG_CAPS_HAS_GET_LEVEL
RIG_CAPS_VERSION_CPTR = _Hamlib.RIG_CAPS_VERSION_CPTR
RIG_CAPS_MFG_NAME_CPTR = _Hamlib.RIG_CAPS_MFG_NAME_CPTR
RIG_CAPS_MODEL_NAME_CPTR = _Hamlib.RIG_CAPS_MODEL_NAME_CPTR
RIG_CAPS_STATUS_CPTR = _Hamlib.RIG_CAPS_STATUS_CPTR

def rig_get_caps_int(rig_model, rig_caps):
    return _Hamlib.rig_get_caps_int(rig_model, rig_caps)

def rig_get_caps_cptr(rig_model, rig_caps):
    return _Hamlib.rig_get_caps_cptr(rig_model, rig_caps)
class hamlib_port_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    type = property(_Hamlib.hamlib_port_t_type_get)
    fd = property(_Hamlib.hamlib_port_t_fd_get, _Hamlib.hamlib_port_t_fd_set)
    handle = property(_Hamlib.hamlib_port_t_handle_get, _Hamlib.hamlib_port_t_handle_set)
    write_delay = property(_Hamlib.hamlib_port_t_write_delay_get, _Hamlib.hamlib_port_t_write_delay_set)
    post_write_delay = property(_Hamlib.hamlib_port_t_post_write_delay_get, _Hamlib.hamlib_port_t_post_write_delay_set)
    post_write_date = property(_Hamlib.hamlib_port_t_post_write_date_get)
    timeout = property(_Hamlib.hamlib_port_t_timeout_get, _Hamlib.hamlib_port_t_timeout_set)
    retry = property(_Hamlib.hamlib_port_t_retry_get, _Hamlib.hamlib_port_t_retry_set)
    flushx = property(_Hamlib.hamlib_port_t_flushx_get, _Hamlib.hamlib_port_t_flushx_set)
    pathname = property(_Hamlib.hamlib_port_t_pathname_get, _Hamlib.hamlib_port_t_pathname_set)
    parm = property(_Hamlib.hamlib_port_t_parm_get)
    client_port = property(_Hamlib.hamlib_port_t_client_port_get, _Hamlib.hamlib_port_t_client_port_set)
    rig = property(_Hamlib.hamlib_port_t_rig_get, _Hamlib.hamlib_port_t_rig_set)

    def __init__(self):
        _Hamlib.hamlib_port_t_swiginit(self, _Hamlib.new_hamlib_port_t())
    __swig_destroy__ = _Hamlib.delete_hamlib_port_t

# Register hamlib_port_t in _Hamlib:
_Hamlib.hamlib_port_t_swigregister(hamlib_port_t)

class hamlib_port_parm(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    serial = property(_Hamlib.hamlib_port_parm_serial_get)
    parallel = property(_Hamlib.hamlib_port_parm_parallel_get)
    cm108 = property(_Hamlib.hamlib_port_parm_cm108_get)
    usb = property(_Hamlib.hamlib_port_parm_usb_get)
    gpio = property(_Hamlib.hamlib_port_parm_gpio_get)

    def __init__(self):
        _Hamlib.hamlib_port_parm_swiginit(self, _Hamlib.new_hamlib_port_parm())
    __swig_destroy__ = _Hamlib.delete_hamlib_port_parm

# Register hamlib_port_parm in _Hamlib:
_Hamlib.hamlib_port_parm_swigregister(hamlib_port_parm)

class hamlib_port_parm_gpio(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    on_value = property(_Hamlib.hamlib_port_parm_gpio_on_value_get, _Hamlib.hamlib_port_parm_gpio_on_value_set)
    value = property(_Hamlib.hamlib_port_parm_gpio_value_get, _Hamlib.hamlib_port_parm_gpio_value_set)

    def __init__(self):
        _Hamlib.hamlib_port_parm_gpio_swiginit(self, _Hamlib.new_hamlib_port_parm_gpio())
    __swig_destroy__ = _Hamlib.delete_hamlib_port_parm_gpio

# Register hamlib_port_parm_gpio in _Hamlib:
_Hamlib.hamlib_port_parm_gpio_swigregister(hamlib_port_parm_gpio)

class hamlib_port_parm_usb(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    vid = property(_Hamlib.hamlib_port_parm_usb_vid_get, _Hamlib.hamlib_port_parm_usb_vid_set)
    pid = property(_Hamlib.hamlib_port_parm_usb_pid_get, _Hamlib.hamlib_port_parm_usb_pid_set)
    conf = property(_Hamlib.hamlib_port_parm_usb_conf_get, _Hamlib.hamlib_port_parm_usb_conf_set)
    iface = property(_Hamlib.hamlib_port_parm_usb_iface_get, _Hamlib.hamlib_port_parm_usb_iface_set)
    alt = property(_Hamlib.hamlib_port_parm_usb_alt_get, _Hamlib.hamlib_port_parm_usb_alt_set)
    vendor_name = property(_Hamlib.hamlib_port_parm_usb_vendor_name_get, _Hamlib.hamlib_port_parm_usb_vendor_name_set)
    product = property(_Hamlib.hamlib_port_parm_usb_product_get, _Hamlib.hamlib_port_parm_usb_product_set)

    def __init__(self):
        _Hamlib.hamlib_port_parm_usb_swiginit(self, _Hamlib.new_hamlib_port_parm_usb())
    __swig_destroy__ = _Hamlib.delete_hamlib_port_parm_usb

# Register hamlib_port_parm_usb in _Hamlib:
_Hamlib.hamlib_port_parm_usb_swigregister(hamlib_port_parm_usb)

class hamlib_port_parm_cm108(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ptt_bitnum = property(_Hamlib.hamlib_port_parm_cm108_ptt_bitnum_get, _Hamlib.hamlib_port_parm_cm108_ptt_bitnum_set)

    def __init__(self):
        _Hamlib.hamlib_port_parm_cm108_swiginit(self, _Hamlib.new_hamlib_port_parm_cm108())
    __swig_destroy__ = _Hamlib.delete_hamlib_port_parm_cm108

# Register hamlib_port_parm_cm108 in _Hamlib:
_Hamlib.hamlib_port_parm_cm108_swigregister(hamlib_port_parm_cm108)

class hamlib_port_parm_parallel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pin = property(_Hamlib.hamlib_port_parm_parallel_pin_get, _Hamlib.hamlib_port_parm_parallel_pin_set)

    def __init__(self):
        _Hamlib.hamlib_port_parm_parallel_swiginit(self, _Hamlib.new_hamlib_port_parm_parallel())
    __swig_destroy__ = _Hamlib.delete_hamlib_port_parm_parallel

# Register hamlib_port_parm_parallel in _Hamlib:
_Hamlib.hamlib_port_parm_parallel_swigregister(hamlib_port_parm_parallel)

class hamlib_port_parm_serial(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    rate = property(_Hamlib.hamlib_port_parm_serial_rate_get, _Hamlib.hamlib_port_parm_serial_rate_set)
    data_bits = property(_Hamlib.hamlib_port_parm_serial_data_bits_get, _Hamlib.hamlib_port_parm_serial_data_bits_set)
    stop_bits = property(_Hamlib.hamlib_port_parm_serial_stop_bits_get, _Hamlib.hamlib_port_parm_serial_stop_bits_set)
    parity = property(_Hamlib.hamlib_port_parm_serial_parity_get, _Hamlib.hamlib_port_parm_serial_parity_set)
    handshake = property(_Hamlib.hamlib_port_parm_serial_handshake_get, _Hamlib.hamlib_port_parm_serial_handshake_set)
    rts_state = property(_Hamlib.hamlib_port_parm_serial_rts_state_get, _Hamlib.hamlib_port_parm_serial_rts_state_set)
    dtr_state = property(_Hamlib.hamlib_port_parm_serial_dtr_state_get, _Hamlib.hamlib_port_parm_serial_dtr_state_set)

    def __init__(self):
        _Hamlib.hamlib_port_parm_serial_swiginit(self, _Hamlib.new_hamlib_port_parm_serial())
    __swig_destroy__ = _Hamlib.delete_hamlib_port_parm_serial

# Register hamlib_port_parm_serial in _Hamlib:
_Hamlib.hamlib_port_parm_serial_swigregister(hamlib_port_parm_serial)

class hamlib_port_post_write_date(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    tv_sec = property(_Hamlib.hamlib_port_post_write_date_tv_sec_get, _Hamlib.hamlib_port_post_write_date_tv_sec_set)
    tv_usec = property(_Hamlib.hamlib_port_post_write_date_tv_usec_get, _Hamlib.hamlib_port_post_write_date_tv_usec_set)

    def __init__(self):
        _Hamlib.hamlib_port_post_write_date_swiginit(self, _Hamlib.new_hamlib_port_post_write_date())
    __swig_destroy__ = _Hamlib.delete_hamlib_port_post_write_date

# Register hamlib_port_post_write_date in _Hamlib:
_Hamlib.hamlib_port_post_write_date_swigregister(hamlib_port_post_write_date)

class hamlib_port_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    rig = property(_Hamlib.hamlib_port_type_rig_get, _Hamlib.hamlib_port_type_rig_set)
    ptt = property(_Hamlib.hamlib_port_type_ptt_get, _Hamlib.hamlib_port_type_ptt_set)
    dcd = property(_Hamlib.hamlib_port_type_dcd_get, _Hamlib.hamlib_port_type_dcd_set)

    def __init__(self):
        _Hamlib.hamlib_port_type_swiginit(self, _Hamlib.new_hamlib_port_type())
    __swig_destroy__ = _Hamlib.delete_hamlib_port_type

# Register hamlib_port_type in _Hamlib:
_Hamlib.hamlib_port_type_swigregister(hamlib_port_type)

HAMLIB_ELAPSED_GET = _Hamlib.HAMLIB_ELAPSED_GET
HAMLIB_ELAPSED_SET = _Hamlib.HAMLIB_ELAPSED_SET
HAMLIB_ELAPSED_INVALIDATE = _Hamlib.HAMLIB_ELAPSED_INVALIDATE
HAMLIB_CACHE_ALWAYS = _Hamlib.HAMLIB_CACHE_ALWAYS
HAMLIB_CACHE_ALL = _Hamlib.HAMLIB_CACHE_ALL
HAMLIB_CACHE_VFO = _Hamlib.HAMLIB_CACHE_VFO
HAMLIB_CACHE_FREQ = _Hamlib.HAMLIB_CACHE_FREQ
HAMLIB_CACHE_MODE = _Hamlib.HAMLIB_CACHE_MODE
HAMLIB_CACHE_PTT = _Hamlib.HAMLIB_CACHE_PTT
HAMLIB_CACHE_SPLIT = _Hamlib.HAMLIB_CACHE_SPLIT
HAMLIB_CACHE_WIDTH = _Hamlib.HAMLIB_CACHE_WIDTH
TWIDDLE_OFF = _Hamlib.TWIDDLE_OFF
TWIDDLE_ON = _Hamlib.TWIDDLE_ON
class rig_cache(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    timeout_ms = property(_Hamlib.rig_cache_timeout_ms_get, _Hamlib.rig_cache_timeout_ms_set)
    vfo = property(_Hamlib.rig_cache_vfo_get, _Hamlib.rig_cache_vfo_set)
    freqCurr = property(_Hamlib.rig_cache_freqCurr_get, _Hamlib.rig_cache_freqCurr_set)
    freqOther = property(_Hamlib.rig_cache_freqOther_get, _Hamlib.rig_cache_freqOther_set)
    freqMainA = property(_Hamlib.rig_cache_freqMainA_get, _Hamlib.rig_cache_freqMainA_set)
    freqMainB = property(_Hamlib.rig_cache_freqMainB_get, _Hamlib.rig_cache_freqMainB_set)
    freqMainC = property(_Hamlib.rig_cache_freqMainC_get, _Hamlib.rig_cache_freqMainC_set)
    freqSubA = property(_Hamlib.rig_cache_freqSubA_get, _Hamlib.rig_cache_freqSubA_set)
    freqSubB = property(_Hamlib.rig_cache_freqSubB_get, _Hamlib.rig_cache_freqSubB_set)
    freqSubC = property(_Hamlib.rig_cache_freqSubC_get, _Hamlib.rig_cache_freqSubC_set)
    freqMem = property(_Hamlib.rig_cache_freqMem_get, _Hamlib.rig_cache_freqMem_set)
    modeCurr = property(_Hamlib.rig_cache_modeCurr_get, _Hamlib.rig_cache_modeCurr_set)
    modeOther = property(_Hamlib.rig_cache_modeOther_get, _Hamlib.rig_cache_modeOther_set)
    modeMainA = property(_Hamlib.rig_cache_modeMainA_get, _Hamlib.rig_cache_modeMainA_set)
    modeMainB = property(_Hamlib.rig_cache_modeMainB_get, _Hamlib.rig_cache_modeMainB_set)
    modeMainC = property(_Hamlib.rig_cache_modeMainC_get, _Hamlib.rig_cache_modeMainC_set)
    modeSubA = property(_Hamlib.rig_cache_modeSubA_get, _Hamlib.rig_cache_modeSubA_set)
    modeSubB = property(_Hamlib.rig_cache_modeSubB_get, _Hamlib.rig_cache_modeSubB_set)
    modeSubC = property(_Hamlib.rig_cache_modeSubC_get, _Hamlib.rig_cache_modeSubC_set)
    modeMem = property(_Hamlib.rig_cache_modeMem_get, _Hamlib.rig_cache_modeMem_set)
    widthCurr = property(_Hamlib.rig_cache_widthCurr_get, _Hamlib.rig_cache_widthCurr_set)
    widthOther = property(_Hamlib.rig_cache_widthOther_get, _Hamlib.rig_cache_widthOther_set)
    widthMainA = property(_Hamlib.rig_cache_widthMainA_get, _Hamlib.rig_cache_widthMainA_set)
    widthMainB = property(_Hamlib.rig_cache_widthMainB_get, _Hamlib.rig_cache_widthMainB_set)
    widthMainC = property(_Hamlib.rig_cache_widthMainC_get, _Hamlib.rig_cache_widthMainC_set)
    widthSubA = property(_Hamlib.rig_cache_widthSubA_get, _Hamlib.rig_cache_widthSubA_set)
    widthSubB = property(_Hamlib.rig_cache_widthSubB_get, _Hamlib.rig_cache_widthSubB_set)
    widthSubC = property(_Hamlib.rig_cache_widthSubC_get, _Hamlib.rig_cache_widthSubC_set)
    widthMem = property(_Hamlib.rig_cache_widthMem_get, _Hamlib.rig_cache_widthMem_set)
    ptt = property(_Hamlib.rig_cache_ptt_get, _Hamlib.rig_cache_ptt_set)
    split = property(_Hamlib.rig_cache_split_get, _Hamlib.rig_cache_split_set)
    split_vfo = property(_Hamlib.rig_cache_split_vfo_get, _Hamlib.rig_cache_split_vfo_set)
    time_freqCurr = property(_Hamlib.rig_cache_time_freqCurr_get, _Hamlib.rig_cache_time_freqCurr_set)
    time_freqOther = property(_Hamlib.rig_cache_time_freqOther_get, _Hamlib.rig_cache_time_freqOther_set)
    time_freqMainA = property(_Hamlib.rig_cache_time_freqMainA_get, _Hamlib.rig_cache_time_freqMainA_set)
    time_freqMainB = property(_Hamlib.rig_cache_time_freqMainB_get, _Hamlib.rig_cache_time_freqMainB_set)
    time_freqMainC = property(_Hamlib.rig_cache_time_freqMainC_get, _Hamlib.rig_cache_time_freqMainC_set)
    time_freqSubA = property(_Hamlib.rig_cache_time_freqSubA_get, _Hamlib.rig_cache_time_freqSubA_set)
    time_freqSubB = property(_Hamlib.rig_cache_time_freqSubB_get, _Hamlib.rig_cache_time_freqSubB_set)
    time_freqSubC = property(_Hamlib.rig_cache_time_freqSubC_get, _Hamlib.rig_cache_time_freqSubC_set)
    time_freqMem = property(_Hamlib.rig_cache_time_freqMem_get, _Hamlib.rig_cache_time_freqMem_set)
    time_vfo = property(_Hamlib.rig_cache_time_vfo_get, _Hamlib.rig_cache_time_vfo_set)
    time_modeCurr = property(_Hamlib.rig_cache_time_modeCurr_get, _Hamlib.rig_cache_time_modeCurr_set)
    time_modeOther = property(_Hamlib.rig_cache_time_modeOther_get, _Hamlib.rig_cache_time_modeOther_set)
    time_modeMainA = property(_Hamlib.rig_cache_time_modeMainA_get, _Hamlib.rig_cache_time_modeMainA_set)
    time_modeMainB = property(_Hamlib.rig_cache_time_modeMainB_get, _Hamlib.rig_cache_time_modeMainB_set)
    time_modeMainC = property(_Hamlib.rig_cache_time_modeMainC_get, _Hamlib.rig_cache_time_modeMainC_set)
    time_modeSubA = property(_Hamlib.rig_cache_time_modeSubA_get, _Hamlib.rig_cache_time_modeSubA_set)
    time_modeSubB = property(_Hamlib.rig_cache_time_modeSubB_get, _Hamlib.rig_cache_time_modeSubB_set)
    time_modeSubC = property(_Hamlib.rig_cache_time_modeSubC_get, _Hamlib.rig_cache_time_modeSubC_set)
    time_modeMem = property(_Hamlib.rig_cache_time_modeMem_get, _Hamlib.rig_cache_time_modeMem_set)
    time_widthCurr = property(_Hamlib.rig_cache_time_widthCurr_get, _Hamlib.rig_cache_time_widthCurr_set)
    time_widthOther = property(_Hamlib.rig_cache_time_widthOther_get, _Hamlib.rig_cache_time_widthOther_set)
    time_widthMainA = property(_Hamlib.rig_cache_time_widthMainA_get, _Hamlib.rig_cache_time_widthMainA_set)
    time_widthMainB = property(_Hamlib.rig_cache_time_widthMainB_get, _Hamlib.rig_cache_time_widthMainB_set)
    time_widthMainC = property(_Hamlib.rig_cache_time_widthMainC_get, _Hamlib.rig_cache_time_widthMainC_set)
    time_widthSubA = property(_Hamlib.rig_cache_time_widthSubA_get, _Hamlib.rig_cache_time_widthSubA_set)
    time_widthSubB = property(_Hamlib.rig_cache_time_widthSubB_get, _Hamlib.rig_cache_time_widthSubB_set)
    time_widthSubC = property(_Hamlib.rig_cache_time_widthSubC_get, _Hamlib.rig_cache_time_widthSubC_set)
    time_widthMem = property(_Hamlib.rig_cache_time_widthMem_get, _Hamlib.rig_cache_time_widthMem_set)
    time_ptt = property(_Hamlib.rig_cache_time_ptt_get, _Hamlib.rig_cache_time_ptt_set)
    time_split = property(_Hamlib.rig_cache_time_split_get, _Hamlib.rig_cache_time_split_set)
    satmode = property(_Hamlib.rig_cache_satmode_get, _Hamlib.rig_cache_satmode_set)

    def __init__(self):
        _Hamlib.rig_cache_swiginit(self, _Hamlib.new_rig_cache())
    __swig_destroy__ = _Hamlib.delete_rig_cache

# Register rig_cache in _Hamlib:
_Hamlib.rig_cache_swigregister(rig_cache)

class rig_state(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    rigport = property(_Hamlib.rig_state_rigport_get, _Hamlib.rig_state_rigport_set)
    pttport = property(_Hamlib.rig_state_pttport_get, _Hamlib.rig_state_pttport_set)
    dcdport = property(_Hamlib.rig_state_dcdport_get, _Hamlib.rig_state_dcdport_set)
    vfo_comp = property(_Hamlib.rig_state_vfo_comp_get, _Hamlib.rig_state_vfo_comp_set)
    deprecated_itu_region = property(_Hamlib.rig_state_deprecated_itu_region_get, _Hamlib.rig_state_deprecated_itu_region_set)
    rx_range_list = property(_Hamlib.rig_state_rx_range_list_get, _Hamlib.rig_state_rx_range_list_set)
    tx_range_list = property(_Hamlib.rig_state_tx_range_list_get, _Hamlib.rig_state_tx_range_list_set)
    tuning_steps = property(_Hamlib.rig_state_tuning_steps_get, _Hamlib.rig_state_tuning_steps_set)
    filters = property(_Hamlib.rig_state_filters_get, _Hamlib.rig_state_filters_set)
    str_cal = property(_Hamlib.rig_state_str_cal_get, _Hamlib.rig_state_str_cal_set)
    chan_list = property(_Hamlib.rig_state_chan_list_get, _Hamlib.rig_state_chan_list_set)
    max_rit = property(_Hamlib.rig_state_max_rit_get, _Hamlib.rig_state_max_rit_set)
    max_xit = property(_Hamlib.rig_state_max_xit_get, _Hamlib.rig_state_max_xit_set)
    max_ifshift = property(_Hamlib.rig_state_max_ifshift_get, _Hamlib.rig_state_max_ifshift_set)
    announces = property(_Hamlib.rig_state_announces_get, _Hamlib.rig_state_announces_set)
    preamp = property(_Hamlib.rig_state_preamp_get, _Hamlib.rig_state_preamp_set)
    attenuator = property(_Hamlib.rig_state_attenuator_get, _Hamlib.rig_state_attenuator_set)
    has_get_func = property(_Hamlib.rig_state_has_get_func_get, _Hamlib.rig_state_has_get_func_set)
    has_set_func = property(_Hamlib.rig_state_has_set_func_get, _Hamlib.rig_state_has_set_func_set)
    has_get_level = property(_Hamlib.rig_state_has_get_level_get, _Hamlib.rig_state_has_get_level_set)
    has_set_level = property(_Hamlib.rig_state_has_set_level_get, _Hamlib.rig_state_has_set_level_set)
    has_get_parm = property(_Hamlib.rig_state_has_get_parm_get, _Hamlib.rig_state_has_get_parm_set)
    has_set_parm = property(_Hamlib.rig_state_has_set_parm_get, _Hamlib.rig_state_has_set_parm_set)
    level_gran = property(_Hamlib.rig_state_level_gran_get, _Hamlib.rig_state_level_gran_set)
    parm_gran = property(_Hamlib.rig_state_parm_gran_get, _Hamlib.rig_state_parm_gran_set)
    hold_decode = property(_Hamlib.rig_state_hold_decode_get, _Hamlib.rig_state_hold_decode_set)
    current_vfo = property(_Hamlib.rig_state_current_vfo_get, _Hamlib.rig_state_current_vfo_set)
    vfo_list = property(_Hamlib.rig_state_vfo_list_get, _Hamlib.rig_state_vfo_list_set)
    comm_state = property(_Hamlib.rig_state_comm_state_get, _Hamlib.rig_state_comm_state_set)
    priv = property(_Hamlib.rig_state_priv_get, _Hamlib.rig_state_priv_set)
    obj = property(_Hamlib.rig_state_obj_get, _Hamlib.rig_state_obj_set)
    transceive = property(_Hamlib.rig_state_transceive_get, _Hamlib.rig_state_transceive_set)
    poll_interval = property(_Hamlib.rig_state_poll_interval_get, _Hamlib.rig_state_poll_interval_set)
    current_freq = property(_Hamlib.rig_state_current_freq_get, _Hamlib.rig_state_current_freq_set)
    current_mode = property(_Hamlib.rig_state_current_mode_get, _Hamlib.rig_state_current_mode_set)
    current_width = property(_Hamlib.rig_state_current_width_get, _Hamlib.rig_state_current_width_set)
    tx_vfo = property(_Hamlib.rig_state_tx_vfo_get, _Hamlib.rig_state_tx_vfo_set)
    mode_list = property(_Hamlib.rig_state_mode_list_get, _Hamlib.rig_state_mode_list_set)
    transmit = property(_Hamlib.rig_state_transmit_get, _Hamlib.rig_state_transmit_set)
    lo_freq = property(_Hamlib.rig_state_lo_freq_get, _Hamlib.rig_state_lo_freq_set)
    twiddle_time = property(_Hamlib.rig_state_twiddle_time_get, _Hamlib.rig_state_twiddle_time_set)
    twiddle_timeout = property(_Hamlib.rig_state_twiddle_timeout_get, _Hamlib.rig_state_twiddle_timeout_set)
    uplink = property(_Hamlib.rig_state_uplink_get, _Hamlib.rig_state_uplink_set)
    cache = property(_Hamlib.rig_state_cache_get, _Hamlib.rig_state_cache_set)
    vfo_opt = property(_Hamlib.rig_state_vfo_opt_get, _Hamlib.rig_state_vfo_opt_set)
    auto_power_on = property(_Hamlib.rig_state_auto_power_on_get, _Hamlib.rig_state_auto_power_on_set)
    auto_power_off = property(_Hamlib.rig_state_auto_power_off_get, _Hamlib.rig_state_auto_power_off_set)
    auto_disable_screensaver = property(_Hamlib.rig_state_auto_disable_screensaver_get, _Hamlib.rig_state_auto_disable_screensaver_set)
    ptt_share = property(_Hamlib.rig_state_ptt_share_get, _Hamlib.rig_state_ptt_share_set)
    power_now = property(_Hamlib.rig_state_power_now_get, _Hamlib.rig_state_power_now_set)
    power_min = property(_Hamlib.rig_state_power_min_get, _Hamlib.rig_state_power_min_set)
    power_max = property(_Hamlib.rig_state_power_max_get, _Hamlib.rig_state_power_max_set)
    disable_yaesu_bandselect = property(_Hamlib.rig_state_disable_yaesu_bandselect_get, _Hamlib.rig_state_disable_yaesu_bandselect_set)
    twiddle_rit = property(_Hamlib.rig_state_twiddle_rit_get, _Hamlib.rig_state_twiddle_rit_set)
    twiddle_state = property(_Hamlib.rig_state_twiddle_state_get, _Hamlib.rig_state_twiddle_state_set)
    rx_vfo = property(_Hamlib.rig_state_rx_vfo_get, _Hamlib.rig_state_rx_vfo_set)

    def __init__(self):
        _Hamlib.rig_state_swiginit(self, _Hamlib.new_rig_state())
    __swig_destroy__ = _Hamlib.delete_rig_state

# Register rig_state in _Hamlib:
_Hamlib.rig_state_swigregister(rig_state)

class rig_callbacks(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    freq_event = property(_Hamlib.rig_callbacks_freq_event_get, _Hamlib.rig_callbacks_freq_event_set)
    freq_arg = property(_Hamlib.rig_callbacks_freq_arg_get, _Hamlib.rig_callbacks_freq_arg_set)
    mode_event = property(_Hamlib.rig_callbacks_mode_event_get, _Hamlib.rig_callbacks_mode_event_set)
    mode_arg = property(_Hamlib.rig_callbacks_mode_arg_get, _Hamlib.rig_callbacks_mode_arg_set)
    vfo_event = property(_Hamlib.rig_callbacks_vfo_event_get, _Hamlib.rig_callbacks_vfo_event_set)
    vfo_arg = property(_Hamlib.rig_callbacks_vfo_arg_get, _Hamlib.rig_callbacks_vfo_arg_set)
    ptt_event = property(_Hamlib.rig_callbacks_ptt_event_get, _Hamlib.rig_callbacks_ptt_event_set)
    ptt_arg = property(_Hamlib.rig_callbacks_ptt_arg_get, _Hamlib.rig_callbacks_ptt_arg_set)
    dcd_event = property(_Hamlib.rig_callbacks_dcd_event_get, _Hamlib.rig_callbacks_dcd_event_set)
    dcd_arg = property(_Hamlib.rig_callbacks_dcd_arg_get, _Hamlib.rig_callbacks_dcd_arg_set)
    pltune = property(_Hamlib.rig_callbacks_pltune_get, _Hamlib.rig_callbacks_pltune_set)
    pltune_arg = property(_Hamlib.rig_callbacks_pltune_arg_get, _Hamlib.rig_callbacks_pltune_arg_set)
    spectrum_event = property(_Hamlib.rig_callbacks_spectrum_event_get, _Hamlib.rig_callbacks_spectrum_event_set)
    spectrum_arg = property(_Hamlib.rig_callbacks_spectrum_arg_get, _Hamlib.rig_callbacks_spectrum_arg_set)

    def __init__(self):
        _Hamlib.rig_callbacks_swiginit(self, _Hamlib.new_rig_callbacks())
    __swig_destroy__ = _Hamlib.delete_rig_callbacks

# Register rig_callbacks in _Hamlib:
_Hamlib.rig_callbacks_swigregister(rig_callbacks)

class s_rig(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    caps = property(_Hamlib.s_rig_caps_get, _Hamlib.s_rig_caps_set)
    state = property(_Hamlib.s_rig_state_get, _Hamlib.s_rig_state_set)
    callbacks = property(_Hamlib.s_rig_callbacks_get, _Hamlib.s_rig_callbacks_set)

    def __init__(self):
        _Hamlib.s_rig_swiginit(self, _Hamlib.new_s_rig())
    __swig_destroy__ = _Hamlib.delete_s_rig

# Register s_rig in _Hamlib:
_Hamlib.s_rig_swigregister(s_rig)


def rig_init(rig_model):
    return _Hamlib.rig_init(rig_model)

def rig_flush(port):
    return _Hamlib.rig_flush(port)

def rig_get_vfo_list(rig, buf, buflen):
    return _Hamlib.rig_get_vfo_list(rig, buf, buflen)

def netrigctl_get_vfo_mode(rig):
    return _Hamlib.netrigctl_get_vfo_mode(rig)

def rig_set_split_freq_mode(rig, vfo, tx_freq, tx_mode, tx_width):
    return _Hamlib.rig_set_split_freq_mode(rig, vfo, tx_freq, tx_mode, tx_width)

def rig_get_split_freq_mode(rig, vfo, tx_freq, tx_mode, tx_width):
    return _Hamlib.rig_get_split_freq_mode(rig, vfo, tx_freq, tx_mode, tx_width)

def rig_set_split_vfo(arg1, rx_vfo, split, tx_vfo):
    return _Hamlib.rig_set_split_vfo(arg1, rx_vfo, split, tx_vfo)

def rig_get_split_vfo(arg1, rx_vfo, split, tx_vfo):
    return _Hamlib.rig_get_split_vfo(arg1, rx_vfo, split, tx_vfo)

def rig_set_ext_func(rig, vfo, token, status):
    return _Hamlib.rig_set_ext_func(rig, vfo, token, status)

def rig_get_ext_func(rig, vfo, token, status):
    return _Hamlib.rig_get_ext_func(rig, vfo, token, status)

def rig_ext_func_foreach(rig, cfunc, data):
    return _Hamlib.rig_ext_func_foreach(rig, cfunc, data)

def rig_ext_lookup(rig, name):
    return _Hamlib.rig_ext_lookup(rig, name)

def rig_ext_lookup_tok(rig, token):
    return _Hamlib.rig_ext_lookup_tok(rig, token)

def rig_ext_token_lookup(rig, name):
    return _Hamlib.rig_ext_token_lookup(rig, name)

def rig_token_foreach(rig, cfunc, data):
    return _Hamlib.rig_token_foreach(rig, cfunc, data)

def rig_confparam_lookup(rig, name):
    return _Hamlib.rig_confparam_lookup(rig, name)

def rig_stop_morse(rig, vfo):
    return _Hamlib.rig_stop_morse(rig, vfo)

def rig_wait_morse(rig, vfo):
    return _Hamlib.rig_wait_morse(rig, vfo)

def rig_send_voice_mem(rig, vfo, ch):
    return _Hamlib.rig_send_voice_mem(rig, vfo, ch)

def rig_set_chan_all(rig, vfo, chans):
    return _Hamlib.rig_set_chan_all(rig, vfo, chans)

def rig_get_chan_all(rig, vfo, chans):
    return _Hamlib.rig_get_chan_all(rig, vfo, chans)

def rig_set_chan_all_cb(rig, vfo, chan_cb, arg4):
    return _Hamlib.rig_set_chan_all_cb(rig, vfo, chan_cb, arg4)

def rig_get_chan_all_cb(rig, vfo, chan_cb, arg4):
    return _Hamlib.rig_get_chan_all_cb(rig, vfo, chan_cb, arg4)

def rig_set_mem_all_cb(rig, vfo, chan_cb, parm_cb, arg5):
    return _Hamlib.rig_set_mem_all_cb(rig, vfo, chan_cb, parm_cb, arg5)

def rig_get_mem_all_cb(rig, vfo, chan_cb, parm_cb, arg5):
    return _Hamlib.rig_get_mem_all_cb(rig, vfo, chan_cb, parm_cb, arg5)

def rig_set_mem_all(rig, vfo, chan, arg4, arg5):
    return _Hamlib.rig_set_mem_all(rig, vfo, chan, arg4, arg5)

def rig_get_mem_all(rig, vfo, chan, arg4, arg5):
    return _Hamlib.rig_get_mem_all(rig, vfo, chan, arg4, arg5)

def rig_lookup_mem_caps(rig, ch):
    return _Hamlib.rig_lookup_mem_caps(rig, ch)

def rig_mem_count(rig):
    return _Hamlib.rig_mem_count(rig)

def rig_set_spectrum_callback(arg1, arg2, arg3):
    return _Hamlib.rig_set_spectrum_callback(arg1, arg2, arg3)

def rig_set_twiddle(rig, seconds):
    return _Hamlib.rig_set_twiddle(rig, seconds)

def rig_get_twiddle(rig, seconds):
    return _Hamlib.rig_get_twiddle(rig, seconds)

def rig_set_uplink(rig, val):
    return _Hamlib.rig_set_uplink(rig, val)

def rig_get_caps(rig_model):
    return _Hamlib.rig_get_caps(rig_model)

def rig_get_range(range_list, freq, mode):
    return _Hamlib.rig_get_range(range_list, freq, mode)

def rigerror(errnum):
    return _Hamlib.rigerror(errnum)

def rig_setting2idx(s):
    return _Hamlib.rig_setting2idx(s)

def rig_idx2setting(i):
    return _Hamlib.rig_idx2setting(i)

def rig_set_debug(debug_level):
    return _Hamlib.rig_set_debug(debug_level)

def rig_set_debug_time_stamp(flag):
    return _Hamlib.rig_set_debug_time_stamp(flag)

def rig_need_debug(debug_level):
    return _Hamlib.rig_need_debug(debug_level)
DEBUGMSGSAVE_SIZE = _Hamlib.DEBUGMSGSAVE_SIZE

def rig_debug(*args):
    return _Hamlib.rig_debug(*args)

def rig_set_debug_callback(cb, arg):
    return _Hamlib.rig_set_debug_callback(cb, arg)

def rig_set_debug_file(stream):
    return _Hamlib.rig_set_debug_file(stream)

def rig_register(caps):
    return _Hamlib.rig_register(caps)

def rig_unregister(rig_model):
    return _Hamlib.rig_unregister(rig_model)

def rig_list_foreach(cfunc, data):
    return _Hamlib.rig_list_foreach(cfunc, data)

def rig_list_foreach_model(cfunc, data):
    return _Hamlib.rig_list_foreach_model(cfunc, data)

def rig_load_backend(be_name):
    return _Hamlib.rig_load_backend(be_name)

def rig_check_backend(rig_model):
    return _Hamlib.rig_check_backend(rig_model)

def rig_load_all_backends():
    return _Hamlib.rig_load_all_backends()

def rig_probe_all(p, arg2, arg3):
    return _Hamlib.rig_probe_all(p, arg2, arg3)

def rig_strrmode(mode):
    return _Hamlib.rig_strrmode(mode)

def rig_strrmodes(modes, buf, buflen):
    return _Hamlib.rig_strrmodes(modes, buf, buflen)

def rig_strvfo(vfo):
    return _Hamlib.rig_strvfo(vfo)

def rig_strfunc(arg1):
    return _Hamlib.rig_strfunc(arg1)

def rig_strlevel(arg1):
    return _Hamlib.rig_strlevel(arg1)

def rig_strparm(arg1):
    return _Hamlib.rig_strparm(arg1)

def rig_stragclevel(level):
    return _Hamlib.rig_stragclevel(level)

def rig_strptrshift(arg1):
    return _Hamlib.rig_strptrshift(arg1)

def rig_strvfop(op):
    return _Hamlib.rig_strvfop(op)

def rig_strscan(scan):
    return _Hamlib.rig_strscan(scan)

def rig_strstatus(status):
    return _Hamlib.rig_strstatus(status)

def rig_strmtype(mtype):
    return _Hamlib.rig_strmtype(mtype)

def rig_strspectrummode(mode):
    return _Hamlib.rig_strspectrummode(mode)

def rig_parse_mode(s):
    return _Hamlib.rig_parse_mode(s)

def rig_parse_vfo(s):
    return _Hamlib.rig_parse_vfo(s)

def rig_parse_func(s):
    return _Hamlib.rig_parse_func(s)

def rig_parse_level(s):
    return _Hamlib.rig_parse_level(s)

def rig_parse_parm(s):
    return _Hamlib.rig_parse_parm(s)

def rig_parse_vfo_op(s):
    return _Hamlib.rig_parse_vfo_op(s)

def rig_parse_scan(s):
    return _Hamlib.rig_parse_scan(s)

def rig_parse_rptr_shift(s):
    return _Hamlib.rig_parse_rptr_shift(s)

def rig_parse_mtype(s):
    return _Hamlib.rig_parse_mtype(s)

def rig_license():
    return _Hamlib.rig_license()

def rig_version():
    return _Hamlib.rig_version()

def rig_copyright():
    return _Hamlib.rig_copyright()

def rig_no_restore_ai():
    return _Hamlib.rig_no_restore_ai()

def rig_get_cache_timeout_ms(rig, selection):
    return _Hamlib.rig_get_cache_timeout_ms(rig, selection)

def rig_set_cache_timeout_ms(rig, selection, ms):
    return _Hamlib.rig_set_cache_timeout_ms(rig, selection, ms)

def rig_set_vfo_opt(rig, status):
    return _Hamlib.rig_set_vfo_opt(rig, status)

def rig_get_rig_info(rig, response, max_response_len):
    return _Hamlib.rig_get_rig_info(rig, response, max_response_len)

def rig_get_cache(rig, vfo, freq, cache_ms_freq, mode, cache_ms_mode, width, cache_ms_width):
    return _Hamlib.rig_get_cache(rig, vfo, freq, cache_ms_freq, mode, cache_ms_mode, width, cache_ms_width)

def rig_set_clock(rig, year, month, day, hour, min, sec, msec, utc_offset):
    return _Hamlib.rig_set_clock(rig, year, month, day, hour, min, sec, msec, utc_offset)

def rig_get_clock(rig, year, month, day, hour, min, sec, msec, utc_offset):
    return _Hamlib.rig_get_clock(rig, year, month, day, hour, min, sec, msec, utc_offset)

def hl_usleep(msec):
    return _Hamlib.hl_usleep(msec)

def rig_cookie(rig, cookie_cmd, cookie, cookie_len):
    return _Hamlib.rig_cookie(rig, cookie_cmd, cookie, cookie_len)
ROT_MODEL_NONE = _Hamlib.ROT_MODEL_NONE
ROT_MODEL_DUMMY = _Hamlib.ROT_MODEL_DUMMY
ROT_MODEL_NETROTCTL = _Hamlib.ROT_MODEL_NETROTCTL
ROT_MODEL_EASYCOMM1 = _Hamlib.ROT_MODEL_EASYCOMM1
ROT_MODEL_EASYCOMM2 = _Hamlib.ROT_MODEL_EASYCOMM2
ROT_MODEL_EASYCOMM3 = _Hamlib.ROT_MODEL_EASYCOMM3
ROT_MODEL_FODTRACK = _Hamlib.ROT_MODEL_FODTRACK
ROT_MODEL_ROTOREZ = _Hamlib.ROT_MODEL_ROTOREZ
ROT_MODEL_ROTORCARD = _Hamlib.ROT_MODEL_ROTORCARD
ROT_MODEL_DCU = _Hamlib.ROT_MODEL_DCU
ROT_MODEL_ERC = _Hamlib.ROT_MODEL_ERC
ROT_MODEL_RT21 = _Hamlib.ROT_MODEL_RT21
ROT_MODEL_SARTEK1 = _Hamlib.ROT_MODEL_SARTEK1
ROT_MODEL_GS232A = _Hamlib.ROT_MODEL_GS232A
ROT_MODEL_GS232_GENERIC = _Hamlib.ROT_MODEL_GS232_GENERIC
ROT_MODEL_GS232B = _Hamlib.ROT_MODEL_GS232B
ROT_MODEL_F1TETRACKER = _Hamlib.ROT_MODEL_F1TETRACKER
ROT_MODEL_GS23 = _Hamlib.ROT_MODEL_GS23
ROT_MODEL_GS232 = _Hamlib.ROT_MODEL_GS232
ROT_MODEL_LVB = _Hamlib.ROT_MODEL_LVB
ROT_MODEL_ST2 = _Hamlib.ROT_MODEL_ST2
ROT_MODEL_GS232A_AZ = _Hamlib.ROT_MODEL_GS232A_AZ
ROT_MODEL_GS232A_EL = _Hamlib.ROT_MODEL_GS232A_EL
ROT_MODEL_GS232B_AZ = _Hamlib.ROT_MODEL_GS232B_AZ
ROT_MODEL_GS232B_EL = _Hamlib.ROT_MODEL_GS232B_EL
ROT_MODEL_PCROTOR = _Hamlib.ROT_MODEL_PCROTOR
ROT_MODEL_HD1780 = _Hamlib.ROT_MODEL_HD1780
ROT_MODEL_SPID_ROT2PROG = _Hamlib.ROT_MODEL_SPID_ROT2PROG
ROT_MODEL_SPID_ROT1PROG = _Hamlib.ROT_MODEL_SPID_ROT1PROG
ROT_MODEL_SPID_MD01_ROT2PROG = _Hamlib.ROT_MODEL_SPID_MD01_ROT2PROG
ROT_MODEL_RC2800 = _Hamlib.ROT_MODEL_RC2800
ROT_MODEL_RC2800_EARLY_AZ = _Hamlib.ROT_MODEL_RC2800_EARLY_AZ
ROT_MODEL_RC2800_EARLY_AZEL = _Hamlib.ROT_MODEL_RC2800_EARLY_AZEL
ROT_MODEL_RCI_AZEL = _Hamlib.ROT_MODEL_RCI_AZEL
ROT_MODEL_RCI_AZ = _Hamlib.ROT_MODEL_RCI_AZ
ROT_MODEL_IF100 = _Hamlib.ROT_MODEL_IF100
ROT_MODEL_TS7400 = _Hamlib.ROT_MODEL_TS7400
ROT_MODEL_NEXSTAR = _Hamlib.ROT_MODEL_NEXSTAR
ROT_ETHER6 = _Hamlib.ROT_ETHER6
ROT_BACKEND_ETHER6 = _Hamlib.ROT_BACKEND_ETHER6
ROT_MODEL_ETHER6 = _Hamlib.ROT_MODEL_ETHER6
ROT_CNCTRK = _Hamlib.ROT_CNCTRK
ROT_BACKEND_CNCTRK = _Hamlib.ROT_BACKEND_CNCTRK
ROT_MODEL_CNCTRK = _Hamlib.ROT_MODEL_CNCTRK
ROT_PROSISTEL = _Hamlib.ROT_PROSISTEL
ROT_BACKEND_PROSISTEL = _Hamlib.ROT_BACKEND_PROSISTEL
ROT_MODEL_PROSISTEL_D_AZ = _Hamlib.ROT_MODEL_PROSISTEL_D_AZ
ROT_MODEL_PROSISTEL_D_EL = _Hamlib.ROT_MODEL_PROSISTEL_D_EL
ROT_MODEL_PROSISTEL_COMBI_TRACK_AZEL = _Hamlib.ROT_MODEL_PROSISTEL_COMBI_TRACK_AZEL
ROT_MEADE = _Hamlib.ROT_MEADE
ROT_BACKEND_MEADE = _Hamlib.ROT_BACKEND_MEADE
ROT_MODEL_MEADE = _Hamlib.ROT_MODEL_MEADE
ROT_IOPTRON = _Hamlib.ROT_IOPTRON
ROT_BACKEND_IOPTRON = _Hamlib.ROT_BACKEND_IOPTRON
ROT_MODEL_IOPTRON = _Hamlib.ROT_MODEL_IOPTRON
ROT_INDI = _Hamlib.ROT_INDI
ROT_BACKEND_INDI = _Hamlib.ROT_BACKEND_INDI
ROT_MODEL_INDI = _Hamlib.ROT_MODEL_INDI
ROT_SATEL = _Hamlib.ROT_SATEL
ROT_BACKEND_SATEL = _Hamlib.ROT_BACKEND_SATEL
ROT_MODEL_SATEL = _Hamlib.ROT_MODEL_SATEL
ROT_RADANT = _Hamlib.ROT_RADANT
ROT_BACKEND_RADANT = _Hamlib.ROT_BACKEND_RADANT
ROT_MODEL_RADANT = _Hamlib.ROT_MODEL_RADANT
ROT_ANDROIDSENSOR = _Hamlib.ROT_ANDROIDSENSOR
ROT_BACKEND_ANDROIDSENSOR = _Hamlib.ROT_BACKEND_ANDROIDSENSOR
ROT_MODEL_ANDROIDSENSOR = _Hamlib.ROT_MODEL_ANDROIDSENSOR
NETROTCTL_RET = _Hamlib.NETROTCTL_RET
ROT_RESET_ALL = _Hamlib.ROT_RESET_ALL
ROT_FLAG_AZIMUTH = _Hamlib.ROT_FLAG_AZIMUTH
ROT_FLAG_ELEVATION = _Hamlib.ROT_FLAG_ELEVATION
ROT_TYPE_OTHER = _Hamlib.ROT_TYPE_OTHER
ROT_MOVE_UP = _Hamlib.ROT_MOVE_UP
ROT_MOVE_DOWN = _Hamlib.ROT_MOVE_DOWN
ROT_MOVE_LEFT = _Hamlib.ROT_MOVE_LEFT
ROT_MOVE_CCW = _Hamlib.ROT_MOVE_CCW
ROT_MOVE_RIGHT = _Hamlib.ROT_MOVE_RIGHT
ROT_MOVE_CW = _Hamlib.ROT_MOVE_CW
ROT_STATUS_NONE = _Hamlib.ROT_STATUS_NONE
ROT_STATUS_BUSY = _Hamlib.ROT_STATUS_BUSY
ROT_STATUS_MOVING = _Hamlib.ROT_STATUS_MOVING
ROT_STATUS_MOVING_AZ = _Hamlib.ROT_STATUS_MOVING_AZ
ROT_STATUS_MOVING_LEFT = _Hamlib.ROT_STATUS_MOVING_LEFT
ROT_STATUS_MOVING_RIGHT = _Hamlib.ROT_STATUS_MOVING_RIGHT
ROT_STATUS_MOVING_EL = _Hamlib.ROT_STATUS_MOVING_EL
ROT_STATUS_MOVING_UP = _Hamlib.ROT_STATUS_MOVING_UP
ROT_STATUS_MOVING_DOWN = _Hamlib.ROT_STATUS_MOVING_DOWN
ROT_STATUS_LIMIT_UP = _Hamlib.ROT_STATUS_LIMIT_UP
ROT_STATUS_LIMIT_DOWN = _Hamlib.ROT_STATUS_LIMIT_DOWN
ROT_STATUS_LIMIT_LEFT = _Hamlib.ROT_STATUS_LIMIT_LEFT
ROT_STATUS_LIMIT_RIGHT = _Hamlib.ROT_STATUS_LIMIT_RIGHT
ROT_STATUS_OVERLAP_UP = _Hamlib.ROT_STATUS_OVERLAP_UP
ROT_STATUS_OVERLAP_DOWN = _Hamlib.ROT_STATUS_OVERLAP_DOWN
ROT_STATUS_OVERLAP_LEFT = _Hamlib.ROT_STATUS_OVERLAP_LEFT
ROT_STATUS_OVERLAP_RIGHT = _Hamlib.ROT_STATUS_OVERLAP_RIGHT
ROT_SPEED_NOCHANGE = _Hamlib.ROT_SPEED_NOCHANGE
ROT_LEVEL_NONE = _Hamlib.ROT_LEVEL_NONE
ROT_LEVEL_SPEED = _Hamlib.ROT_LEVEL_SPEED
ROT_LEVEL_63 = _Hamlib.ROT_LEVEL_63
ROT_LEVEL_FLOAT_LIST = _Hamlib.ROT_LEVEL_FLOAT_LIST
ROT_LEVEL_READONLY_LIST = _Hamlib.ROT_LEVEL_READONLY_LIST
ROT_PARM_NONE = _Hamlib.ROT_PARM_NONE
ROT_PARM_FLOAT_LIST = _Hamlib.ROT_PARM_FLOAT_LIST
ROT_PARM_READONLY_LIST = _Hamlib.ROT_PARM_READONLY_LIST
ROT_FUNC_NONE = _Hamlib.ROT_FUNC_NONE
ROT_FUNC_BIT63 = _Hamlib.ROT_FUNC_BIT63
class rot_caps(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    rot_model = property(_Hamlib.rot_caps_rot_model_get, _Hamlib.rot_caps_rot_model_set)
    model_name = property(_Hamlib.rot_caps_model_name_get)
    mfg_name = property(_Hamlib.rot_caps_mfg_name_get)
    version = property(_Hamlib.rot_caps_version_get)
    copyright = property(_Hamlib.rot_caps_copyright_get)
    status = property(_Hamlib.rot_caps_status_get, _Hamlib.rot_caps_status_set)
    rot_type = property(_Hamlib.rot_caps_rot_type_get, _Hamlib.rot_caps_rot_type_set)
    port_type = property(_Hamlib.rot_caps_port_type_get, _Hamlib.rot_caps_port_type_set)
    serial_rate_min = property(_Hamlib.rot_caps_serial_rate_min_get, _Hamlib.rot_caps_serial_rate_min_set)
    serial_rate_max = property(_Hamlib.rot_caps_serial_rate_max_get, _Hamlib.rot_caps_serial_rate_max_set)
    serial_data_bits = property(_Hamlib.rot_caps_serial_data_bits_get, _Hamlib.rot_caps_serial_data_bits_set)
    serial_stop_bits = property(_Hamlib.rot_caps_serial_stop_bits_get, _Hamlib.rot_caps_serial_stop_bits_set)
    serial_parity = property(_Hamlib.rot_caps_serial_parity_get, _Hamlib.rot_caps_serial_parity_set)
    serial_handshake = property(_Hamlib.rot_caps_serial_handshake_get, _Hamlib.rot_caps_serial_handshake_set)
    write_delay = property(_Hamlib.rot_caps_write_delay_get, _Hamlib.rot_caps_write_delay_set)
    post_write_delay = property(_Hamlib.rot_caps_post_write_delay_get, _Hamlib.rot_caps_post_write_delay_set)
    timeout = property(_Hamlib.rot_caps_timeout_get, _Hamlib.rot_caps_timeout_set)
    retry = property(_Hamlib.rot_caps_retry_get, _Hamlib.rot_caps_retry_set)
    has_get_func = property(_Hamlib.rot_caps_has_get_func_get, _Hamlib.rot_caps_has_get_func_set)
    has_set_func = property(_Hamlib.rot_caps_has_set_func_get, _Hamlib.rot_caps_has_set_func_set)
    has_get_level = property(_Hamlib.rot_caps_has_get_level_get, _Hamlib.rot_caps_has_get_level_set)
    has_set_level = property(_Hamlib.rot_caps_has_set_level_get, _Hamlib.rot_caps_has_set_level_set)
    has_get_parm = property(_Hamlib.rot_caps_has_get_parm_get, _Hamlib.rot_caps_has_get_parm_set)
    has_set_parm = property(_Hamlib.rot_caps_has_set_parm_get, _Hamlib.rot_caps_has_set_parm_set)
    has_status = property(_Hamlib.rot_caps_has_status_get, _Hamlib.rot_caps_has_status_set)
    level_gran = property(_Hamlib.rot_caps_level_gran_get, _Hamlib.rot_caps_level_gran_set)
    parm_gran = property(_Hamlib.rot_caps_parm_gran_get, _Hamlib.rot_caps_parm_gran_set)
    extparms = property(_Hamlib.rot_caps_extparms_get, _Hamlib.rot_caps_extparms_set)
    extlevels = property(_Hamlib.rot_caps_extlevels_get, _Hamlib.rot_caps_extlevels_set)
    extfuncs = property(_Hamlib.rot_caps_extfuncs_get, _Hamlib.rot_caps_extfuncs_set)
    ext_tokens = property(_Hamlib.rot_caps_ext_tokens_get, _Hamlib.rot_caps_ext_tokens_set)
    min_az = property(_Hamlib.rot_caps_min_az_get, _Hamlib.rot_caps_min_az_set)
    max_az = property(_Hamlib.rot_caps_max_az_get, _Hamlib.rot_caps_max_az_set)
    min_el = property(_Hamlib.rot_caps_min_el_get, _Hamlib.rot_caps_min_el_set)
    max_el = property(_Hamlib.rot_caps_max_el_get, _Hamlib.rot_caps_max_el_set)
    cfgparams = property(_Hamlib.rot_caps_cfgparams_get, _Hamlib.rot_caps_cfgparams_set)
    priv = property(_Hamlib.rot_caps_priv_get, _Hamlib.rot_caps_priv_set)
    rot_init = property(_Hamlib.rot_caps_rot_init_get, _Hamlib.rot_caps_rot_init_set)
    set_conf = property(_Hamlib.rot_caps_set_conf_get, _Hamlib.rot_caps_set_conf_set)
    get_conf = property(_Hamlib.rot_caps_get_conf_get, _Hamlib.rot_caps_get_conf_set)
    set_position = property(_Hamlib.rot_caps_set_position_get, _Hamlib.rot_caps_set_position_set)
    get_position = property(_Hamlib.rot_caps_get_position_get, _Hamlib.rot_caps_get_position_set)
    stop = property(_Hamlib.rot_caps_stop_get, _Hamlib.rot_caps_stop_set)
    park = property(_Hamlib.rot_caps_park_get, _Hamlib.rot_caps_park_set)
    reset = property(_Hamlib.rot_caps_reset_get, _Hamlib.rot_caps_reset_set)
    move = property(_Hamlib.rot_caps_move_get, _Hamlib.rot_caps_move_set)
    get_info = property(_Hamlib.rot_caps_get_info_get, _Hamlib.rot_caps_get_info_set)
    set_level = property(_Hamlib.rot_caps_set_level_get, _Hamlib.rot_caps_set_level_set)
    get_level = property(_Hamlib.rot_caps_get_level_get, _Hamlib.rot_caps_get_level_set)
    set_func = property(_Hamlib.rot_caps_set_func_get, _Hamlib.rot_caps_set_func_set)
    get_func = property(_Hamlib.rot_caps_get_func_get, _Hamlib.rot_caps_get_func_set)
    set_parm = property(_Hamlib.rot_caps_set_parm_get, _Hamlib.rot_caps_set_parm_set)
    get_parm = property(_Hamlib.rot_caps_get_parm_get, _Hamlib.rot_caps_get_parm_set)
    set_ext_level = property(_Hamlib.rot_caps_set_ext_level_get, _Hamlib.rot_caps_set_ext_level_set)
    get_ext_level = property(_Hamlib.rot_caps_get_ext_level_get, _Hamlib.rot_caps_get_ext_level_set)
    set_ext_func = property(_Hamlib.rot_caps_set_ext_func_get, _Hamlib.rot_caps_set_ext_func_set)
    get_ext_func = property(_Hamlib.rot_caps_get_ext_func_get, _Hamlib.rot_caps_get_ext_func_set)
    set_ext_parm = property(_Hamlib.rot_caps_set_ext_parm_get, _Hamlib.rot_caps_set_ext_parm_set)
    get_ext_parm = property(_Hamlib.rot_caps_get_ext_parm_get, _Hamlib.rot_caps_get_ext_parm_set)
    get_status = property(_Hamlib.rot_caps_get_status_get, _Hamlib.rot_caps_get_status_set)

    def __init__(self):
        _Hamlib.rot_caps_swiginit(self, _Hamlib.new_rot_caps())
    __swig_destroy__ = _Hamlib.delete_rot_caps

# Register rot_caps in _Hamlib:
_Hamlib.rot_caps_swigregister(rot_caps)

class rot_state(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    min_az = property(_Hamlib.rot_state_min_az_get, _Hamlib.rot_state_min_az_set)
    max_az = property(_Hamlib.rot_state_max_az_get, _Hamlib.rot_state_max_az_set)
    min_el = property(_Hamlib.rot_state_min_el_get, _Hamlib.rot_state_min_el_set)
    max_el = property(_Hamlib.rot_state_max_el_get, _Hamlib.rot_state_max_el_set)
    south_zero = property(_Hamlib.rot_state_south_zero_get, _Hamlib.rot_state_south_zero_set)
    az_offset = property(_Hamlib.rot_state_az_offset_get, _Hamlib.rot_state_az_offset_set)
    el_offset = property(_Hamlib.rot_state_el_offset_get, _Hamlib.rot_state_el_offset_set)
    has_get_func = property(_Hamlib.rot_state_has_get_func_get, _Hamlib.rot_state_has_get_func_set)
    has_set_func = property(_Hamlib.rot_state_has_set_func_get, _Hamlib.rot_state_has_set_func_set)
    has_get_level = property(_Hamlib.rot_state_has_get_level_get, _Hamlib.rot_state_has_get_level_set)
    has_set_level = property(_Hamlib.rot_state_has_set_level_get, _Hamlib.rot_state_has_set_level_set)
    has_get_parm = property(_Hamlib.rot_state_has_get_parm_get, _Hamlib.rot_state_has_get_parm_set)
    has_set_parm = property(_Hamlib.rot_state_has_set_parm_get, _Hamlib.rot_state_has_set_parm_set)
    has_status = property(_Hamlib.rot_state_has_status_get, _Hamlib.rot_state_has_status_set)
    level_gran = property(_Hamlib.rot_state_level_gran_get, _Hamlib.rot_state_level_gran_set)
    parm_gran = property(_Hamlib.rot_state_parm_gran_get, _Hamlib.rot_state_parm_gran_set)
    rotport = property(_Hamlib.rot_state_rotport_get, _Hamlib.rot_state_rotport_set)
    rotport2 = property(_Hamlib.rot_state_rotport2_get, _Hamlib.rot_state_rotport2_set)
    comm_state = property(_Hamlib.rot_state_comm_state_get, _Hamlib.rot_state_comm_state_set)
    priv = property(_Hamlib.rot_state_priv_get, _Hamlib.rot_state_priv_set)
    obj = property(_Hamlib.rot_state_obj_get, _Hamlib.rot_state_obj_set)
    current_speed = property(_Hamlib.rot_state_current_speed_get, _Hamlib.rot_state_current_speed_set)

    def __init__(self):
        _Hamlib.rot_state_swiginit(self, _Hamlib.new_rot_state())
    __swig_destroy__ = _Hamlib.delete_rot_state

# Register rot_state in _Hamlib:
_Hamlib.rot_state_swigregister(rot_state)

class s_rot(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    caps = property(_Hamlib.s_rot_caps_get, _Hamlib.s_rot_caps_set)
    state = property(_Hamlib.s_rot_state_get, _Hamlib.s_rot_state_set)

    def __init__(self):
        _Hamlib.s_rot_swiginit(self, _Hamlib.new_s_rot())
    __swig_destroy__ = _Hamlib.delete_s_rot

# Register s_rot in _Hamlib:
_Hamlib.s_rot_swigregister(s_rot)


def rot_init(rot_model):
    return _Hamlib.rot_init(rot_model)

def rot_has_get_level(rot, level):
    return _Hamlib.rot_has_get_level(rot, level)

def rot_has_set_level(rot, level):
    return _Hamlib.rot_has_set_level(rot, level)

def rot_has_get_parm(rot, parm):
    return _Hamlib.rot_has_get_parm(rot, parm)

def rot_has_set_parm(rot, parm):
    return _Hamlib.rot_has_set_parm(rot, parm)

def rot_has_get_func(rot, func):
    return _Hamlib.rot_has_get_func(rot, func)

def rot_has_set_func(rot, func):
    return _Hamlib.rot_has_set_func(rot, func)

def rot_set_func(rot, func, status):
    return _Hamlib.rot_set_func(rot, func, status)

def rot_get_func(rot, func, status):
    return _Hamlib.rot_get_func(rot, func, status)

def rot_set_level(rig, level, val):
    return _Hamlib.rot_set_level(rig, level, val)

def rot_get_level(rig, level, val):
    return _Hamlib.rot_get_level(rig, level, val)

def rot_set_parm(rig, parm, val):
    return _Hamlib.rot_set_parm(rig, parm, val)

def rot_get_parm(rig, parm, val):
    return _Hamlib.rot_get_parm(rig, parm, val)

def rot_set_ext_level(rig, token, val):
    return _Hamlib.rot_set_ext_level(rig, token, val)

def rot_get_ext_level(rig, token, val):
    return _Hamlib.rot_get_ext_level(rig, token, val)

def rot_set_ext_func(rig, token, status):
    return _Hamlib.rot_set_ext_func(rig, token, status)

def rot_get_ext_func(rig, token, status):
    return _Hamlib.rot_get_ext_func(rig, token, status)

def rot_set_ext_parm(rig, token, val):
    return _Hamlib.rot_set_ext_parm(rig, token, val)

def rot_get_ext_parm(rig, token, val):
    return _Hamlib.rot_get_ext_parm(rig, token, val)

def rot_get_status(rot, status):
    return _Hamlib.rot_get_status(rot, status)

def rot_register(caps):
    return _Hamlib.rot_register(caps)

def rot_unregister(rot_model):
    return _Hamlib.rot_unregister(rot_model)

def rot_list_foreach(cfunc, data):
    return _Hamlib.rot_list_foreach(cfunc, data)

def rot_load_backend(be_name):
    return _Hamlib.rot_load_backend(be_name)

def rot_check_backend(rot_model):
    return _Hamlib.rot_check_backend(rot_model)

def rot_load_all_backends():
    return _Hamlib.rot_load_all_backends()

def rot_probe_all(p):
    return _Hamlib.rot_probe_all(p)

def rot_token_foreach(rot, cfunc, data):
    return _Hamlib.rot_token_foreach(rot, cfunc, data)

def rot_confparam_lookup(rot, name):
    return _Hamlib.rot_confparam_lookup(rot, name)

def rot_token_lookup(rot, name):
    return _Hamlib.rot_token_lookup(rot, name)

def rot_ext_func_foreach(rot, cfunc, data):
    return _Hamlib.rot_ext_func_foreach(rot, cfunc, data)

def rot_ext_level_foreach(rot, cfunc, data):
    return _Hamlib.rot_ext_level_foreach(rot, cfunc, data)

def rot_ext_parm_foreach(rot, cfunc, data):
    return _Hamlib.rot_ext_parm_foreach(rot, cfunc, data)

def rot_ext_lookup(rot, name):
    return _Hamlib.rot_ext_lookup(rot, name)

def rot_ext_lookup_tok(rot, token):
    return _Hamlib.rot_ext_lookup_tok(rot, token)

def rot_ext_token_lookup(rot, name):
    return _Hamlib.rot_ext_token_lookup(rot, name)

def rot_get_caps(rot_model):
    return _Hamlib.rot_get_caps(rot_model)

def qrb(lon1, lat1, lon2, lat2):
    return _Hamlib.qrb(lon1, lat1, lon2, lat2)

def distance_long_path(distance):
    return _Hamlib.distance_long_path(distance)

def azimuth_long_path(azimuth):
    return _Hamlib.azimuth_long_path(azimuth)

def longlat2locator(longitude, latitude, pair_count):
    return _Hamlib.longlat2locator(longitude, latitude, pair_count)

def locator2longlat(locator):
    return _Hamlib.locator2longlat(locator)

def dms2dec(degrees, minutes, seconds, sw):
    return _Hamlib.dms2dec(degrees, minutes, seconds, sw)

def dec2dms(dec):
    return _Hamlib.dec2dms(dec)

def dec2dmmm(dec):
    return _Hamlib.dec2dmmm(dec)

def dmmm2dec(degrees, minutes, seconds, sw):
    return _Hamlib.dmmm2dec(degrees, minutes, seconds, sw)

def rot_parse_func(s):
    return _Hamlib.rot_parse_func(s)

def rot_parse_level(s):
    return _Hamlib.rot_parse_level(s)

def rot_parse_parm(s):
    return _Hamlib.rot_parse_parm(s)

def rot_strfunc(arg1):
    return _Hamlib.rot_strfunc(arg1)

def rot_strlevel(arg1):
    return _Hamlib.rot_strlevel(arg1)

def rot_strparm(arg1):
    return _Hamlib.rot_strparm(arg1)

def rot_strstatus(arg1):
    return _Hamlib.rot_strstatus(arg1)
class Rig(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    rig = property(_Hamlib.Rig_rig_get, _Hamlib.Rig_rig_set)
    caps = property(_Hamlib.Rig_caps_get, _Hamlib.Rig_caps_set)
    state = property(_Hamlib.Rig_state_get, _Hamlib.Rig_state_set)
    error_status = property(_Hamlib.Rig_error_status_get, _Hamlib.Rig_error_status_set)
    do_exception = property(_Hamlib.Rig_do_exception_get, _Hamlib.Rig_do_exception_set)

    def __init__(self, rig_model):
        _Hamlib.Rig_swiginit(self, _Hamlib.new_Rig(rig_model))
    __swig_destroy__ = _Hamlib.delete_Rig

    def open(self):
        return _Hamlib.Rig_open(self)

    def close(self):
        return _Hamlib.Rig_close(self)

    def set_freq(self, vfo, _freq_t):
        return _Hamlib.Rig_set_freq(self, vfo, _freq_t)

    def set_mode(self, *args):
        return _Hamlib.Rig_set_mode(self, *args)

    def set_ptt(self, vfo, _ptt_t):
        return _Hamlib.Rig_set_ptt(self, vfo, _ptt_t)

    def set_rptr_shift(self, vfo, _rptr_shift_t):
        return _Hamlib.Rig_set_rptr_shift(self, vfo, _rptr_shift_t)

    def set_rptr_offs(self, vfo, _shortfreq_t):
        return _Hamlib.Rig_set_rptr_offs(self, vfo, _shortfreq_t)

    def set_ctcss_tone(self, vfo, _tone_t):
        return _Hamlib.Rig_set_ctcss_tone(self, vfo, _tone_t)

    def set_dcs_code(self, vfo, _tone_t):
        return _Hamlib.Rig_set_dcs_code(self, vfo, _tone_t)

    def set_ctcss_sql(self, vfo, _tone_t):
        return _Hamlib.Rig_set_ctcss_sql(self, vfo, _tone_t)

    def set_dcs_sql(self, *args):
        return _Hamlib.Rig_set_dcs_sql(self, *args)

    def set_split_freq(self, vfo, _freq_t):
        return _Hamlib.Rig_set_split_freq(self, vfo, _freq_t)

    def set_split_mode(self, *args):
        return _Hamlib.Rig_set_split_mode(self, *args)

    def set_split_freq_mode(self, *args):
        return _Hamlib.Rig_set_split_freq_mode(self, *args)

    def set_split_vfo(self, *args):
        return _Hamlib.Rig_set_split_vfo(self, *args)

    def set_rit(self, vfo, _shortfreq_t):
        return _Hamlib.Rig_set_rit(self, vfo, _shortfreq_t)

    def set_xit(self, vfo, _shortfreq_t):
        return _Hamlib.Rig_set_xit(self, vfo, _shortfreq_t)

    def set_ts(self, vfo, _shortfreq_t):
        return _Hamlib.Rig_set_ts(self, vfo, _shortfreq_t)

    def set_ant(self, *args):
        return _Hamlib.Rig_set_ant(self, *args)

    def set_func(self, *args):
        return _Hamlib.Rig_set_func(self, *args)

    def set_ext_func(self, *args):
        return _Hamlib.Rig_set_ext_func(self, *args)

    def set_bank(self, vfo, _int):
        return _Hamlib.Rig_set_bank(self, vfo, _int)

    def set_mem(self, vfo, _int):
        return _Hamlib.Rig_set_mem(self, vfo, _int)

    def send_dtmf(self, vfo, _const_char_string):
        return _Hamlib.Rig_send_dtmf(self, vfo, _const_char_string)

    def send_morse(self, vfo, _const_char_string):
        return _Hamlib.Rig_send_morse(self, vfo, _const_char_string)

    def vfo_op(self, vfo, _vfo_op_t):
        return _Hamlib.Rig_vfo_op(self, vfo, _vfo_op_t)

    def scan(self, *args):
        return _Hamlib.Rig_scan(self, *args)

    def set_level(self, *args):
        return _Hamlib.Rig_set_level(self, *args)

    def set_ext_level(self, *args):
        return _Hamlib.Rig_set_ext_level(self, *args)

    def get_level_i(self, *args):
        return _Hamlib.Rig_get_level_i(self, *args)

    def get_level_f(self, *args):
        return _Hamlib.Rig_get_level_f(self, *args)

    def set_vfo(self, _vfo_t):
        return _Hamlib.Rig_set_vfo(self, _vfo_t)

    def set_powerstat(self, _powerstat_t):
        return _Hamlib.Rig_set_powerstat(self, _powerstat_t)

    def set_trn(self, _int):
        return _Hamlib.Rig_set_trn(self, _int)

    def has_get_level(self, _setting_t):
        return _Hamlib.Rig_has_get_level(self, _setting_t)

    def has_set_parm(self, _setting_t):
        return _Hamlib.Rig_has_set_parm(self, _setting_t)

    def has_set_func(self, _setting_t):
        return _Hamlib.Rig_has_set_func(self, _setting_t)

    def reset(self, _reset_t):
        return _Hamlib.Rig_reset(self, _reset_t)

    def has_scan(self, _scan_t):
        return _Hamlib.Rig_has_scan(self, _scan_t)

    def has_vfo_op(self, _vfo_op_t):
        return _Hamlib.Rig_has_vfo_op(self, _vfo_op_t)

    def passband_normal(self, _rmode_t):
        return _Hamlib.Rig_passband_normal(self, _rmode_t)

    def passband_narrow(self, _rmode_t):
        return _Hamlib.Rig_passband_narrow(self, _rmode_t)

    def passband_wide(self, _rmode_t):
        return _Hamlib.Rig_passband_wide(self, _rmode_t)

    def ext_token_lookup(self, _const_char_string):
        return _Hamlib.Rig_ext_token_lookup(self, _const_char_string)

    def token_lookup(self, _const_char_string):
        return _Hamlib.Rig_token_lookup(self, _const_char_string)

    def set_ext_parm(self, _token_t_1, _value_t_2):
        return _Hamlib.Rig_set_ext_parm(self, _token_t_1, _value_t_2)

    def set_parm(self, *args):
        return _Hamlib.Rig_set_parm(self, *args)

    def get_parm_i(self, *args):
        return _Hamlib.Rig_get_parm_i(self, *args)

    def get_parm_f(self, *args):
        return _Hamlib.Rig_get_parm_f(self, *args)

    def set_conf(self, *args):
        return _Hamlib.Rig_set_conf(self, *args)

    def get_freq(self, *args):
        return _Hamlib.Rig_get_freq(self, *args)

    def get_mode(self, *args):
        return _Hamlib.Rig_get_mode(self, *args)

    def get_split_mode(self, *args):
        return _Hamlib.Rig_get_split_mode(self, *args)

    def get_vfo(self):
        return _Hamlib.Rig_get_vfo(self)

    def get_ptt(self, *args):
        return _Hamlib.Rig_get_ptt(self, *args)

    def get_rptr_shift(self, *args):
        return _Hamlib.Rig_get_rptr_shift(self, *args)

    def get_rptr_offs(self, *args):
        return _Hamlib.Rig_get_rptr_offs(self, *args)

    def get_ctcss_tone(self, *args):
        return _Hamlib.Rig_get_ctcss_tone(self, *args)

    def get_dcs_code(self, *args):
        return _Hamlib.Rig_get_dcs_code(self, *args)

    def get_ctcss_sql(self, *args):
        return _Hamlib.Rig_get_ctcss_sql(self, *args)

    def get_dcs_sql(self, *args):
        return _Hamlib.Rig_get_dcs_sql(self, *args)

    def get_split_freq(self, *args):
        return _Hamlib.Rig_get_split_freq(self, *args)

    def get_split_vfo(self, *args):
        return _Hamlib.Rig_get_split_vfo(self, *args)

    def get_rit(self, *args):
        return _Hamlib.Rig_get_rit(self, *args)

    def get_xit(self, *args):
        return _Hamlib.Rig_get_xit(self, *args)

    def get_ts(self, *args):
        return _Hamlib.Rig_get_ts(self, *args)

    def get_ant(self, *args):
        return _Hamlib.Rig_get_ant(self, *args)

    def get_vfo_info(self, *args):
        return _Hamlib.Rig_get_vfo_info(self, *args)

    def get_mem(self, *args):
        return _Hamlib.Rig_get_mem(self, *args)

    def get_powerstat(self):
        return _Hamlib.Rig_get_powerstat(self)

    def get_trn(self):
        return _Hamlib.Rig_get_trn(self)

    def get_dcd(self, *args):
        return _Hamlib.Rig_get_dcd(self, *args)

    def mem_count(self):
        return _Hamlib.Rig_mem_count(self)

    def lookup_mem_caps(self, channel_num=-1):
        return _Hamlib.Rig_lookup_mem_caps(self, channel_num)

    def set_channel(self, chan):
        return _Hamlib.Rig_set_channel(self, chan)

    def chan_clear(self, chans, nb_chans=1):
        return _Hamlib.Rig_chan_clear(self, chans, nb_chans)

    def get_chan_all(self, *args):
        return _Hamlib.Rig_get_chan_all(self, *args)

    def get_channel(self, *args):
        return _Hamlib.Rig_get_channel(self, *args)

    def get_conf(self, *args):
        return _Hamlib.Rig_get_conf(self, *args)

    def recv_dtmf(self, *args):
        return _Hamlib.Rig_recv_dtmf(self, *args)

    def get_info(self):
        return _Hamlib.Rig_get_info(self)

    def get_func(self, *args):
        return _Hamlib.Rig_get_func(self, *args)

    def get_ext_func(self, *args):
        return _Hamlib.Rig_get_ext_func(self, *args)

    def get_level(self, *args):
        return _Hamlib.Rig_get_level(self, *args)

    def get_ext_level(self, *args):
        return _Hamlib.Rig_get_ext_level(self, *args)

    def get_parm(self, *args):
        return _Hamlib.Rig_get_parm(self, *args)

    def get_ext_parm(self, parm):
        return _Hamlib.Rig_get_ext_parm(self, parm)

# Register Rig in _Hamlib:
_Hamlib.Rig_swigregister(Rig)

class channelArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _Hamlib.channelArray_swiginit(self, _Hamlib.new_channelArray(nelements))
    __swig_destroy__ = _Hamlib.delete_channelArray

    def __getitem__(self, index):
        return _Hamlib.channelArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _Hamlib.channelArray___setitem__(self, index, value)

    def cast(self):
        return _Hamlib.channelArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _Hamlib.channelArray_frompointer(t)

# Register channelArray in _Hamlib:
_Hamlib.channelArray_swigregister(channelArray)

def channelArray_frompointer(t):
    return _Hamlib.channelArray_frompointer(t)

class toneArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _Hamlib.toneArray_swiginit(self, _Hamlib.new_toneArray(nelements))
    __swig_destroy__ = _Hamlib.delete_toneArray

    def __getitem__(self, index):
        return _Hamlib.toneArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _Hamlib.toneArray___setitem__(self, index, value)

    def cast(self):
        return _Hamlib.toneArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _Hamlib.toneArray_frompointer(t)

# Register toneArray in _Hamlib:
_Hamlib.toneArray_swigregister(toneArray)

def toneArray_frompointer(t):
    return _Hamlib.toneArray_frompointer(t)

class Rot(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    rot = property(_Hamlib.Rot_rot_get, _Hamlib.Rot_rot_set)
    caps = property(_Hamlib.Rot_caps_get, _Hamlib.Rot_caps_set)
    state = property(_Hamlib.Rot_state_get, _Hamlib.Rot_state_set)
    error_status = property(_Hamlib.Rot_error_status_get, _Hamlib.Rot_error_status_set)
    do_exception = property(_Hamlib.Rot_do_exception_get, _Hamlib.Rot_do_exception_set)

    def __init__(self, rot_model):
        _Hamlib.Rot_swiginit(self, _Hamlib.new_Rot(rot_model))
    __swig_destroy__ = _Hamlib.delete_Rot

    def open(self):
        return _Hamlib.Rot_open(self)

    def close(self):
        return _Hamlib.Rot_close(self)

    def set_position(self, _azimuth_t_1, _elevation_t_2):
        return _Hamlib.Rot_set_position(self, _azimuth_t_1, _elevation_t_2)

    def get_position(self):
        return _Hamlib.Rot_get_position(self)

    def stop(self):
        return _Hamlib.Rot_stop(self)

    def park(self):
        return _Hamlib.Rot_park(self)

    def reset(self, _rot_reset_t):
        return _Hamlib.Rot_reset(self, _rot_reset_t)

    def move(self, _int_1, _int_2):
        return _Hamlib.Rot_move(self, _int_1, _int_2)

    def token_lookup(self, _const_char_string):
        return _Hamlib.Rot_token_lookup(self, _const_char_string)

    def set_conf(self, *args):
        return _Hamlib.Rot_set_conf(self, *args)

    def get_conf(self, *args):
        return _Hamlib.Rot_get_conf(self, *args)

    def get_info(self):
        return _Hamlib.Rot_get_info(self)

# Register Rot in _Hamlib:
_Hamlib.Rot_swigregister(Rot)

class Amp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    amp = property(_Hamlib.Amp_amp_get, _Hamlib.Amp_amp_set)
    caps = property(_Hamlib.Amp_caps_get, _Hamlib.Amp_caps_set)
    state = property(_Hamlib.Amp_state_get, _Hamlib.Amp_state_set)
    error_status = property(_Hamlib.Amp_error_status_get, _Hamlib.Amp_error_status_set)
    do_exception = property(_Hamlib.Amp_do_exception_get, _Hamlib.Amp_do_exception_set)

    def __init__(self, amp_model):
        _Hamlib.Amp_swiginit(self, _Hamlib.new_Amp(amp_model))
    __swig_destroy__ = _Hamlib.delete_Amp

    def open(self):
        return _Hamlib.Amp_open(self)

    def close(self):
        return _Hamlib.Amp_close(self)

    def reset(self, _amp_reset_t):
        return _Hamlib.Amp_reset(self, _amp_reset_t)

    def token_lookup(self, _const_char_string):
        return _Hamlib.Amp_token_lookup(self, _const_char_string)

    def set_freq(self, _freq_t):
        return _Hamlib.Amp_set_freq(self, _freq_t)

    def set_powerstat(self, _powerstat_t):
        return _Hamlib.Amp_set_powerstat(self, _powerstat_t)

    def set_conf(self, *args):
        return _Hamlib.Amp_set_conf(self, *args)

    def get_conf(self, *args):
        return _Hamlib.Amp_get_conf(self, *args)

    def get_info(self):
        return _Hamlib.Amp_get_info(self)

# Register Amp in _Hamlib:
_Hamlib.Amp_swigregister(Amp)



