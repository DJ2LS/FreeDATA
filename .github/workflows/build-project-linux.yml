name: Linux
on:
  push:
    tags:
     - 'v*'

jobs:
  build_linux_release:
    name: Build Linux release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04]
        include:
          - os: ubuntu-20.04
            zip_name: ubuntu_tnc
            generator: Unix Makefiles

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
            ref: main

      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8



      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-20.04'
        run: |
          sudo apt install portaudio19-dev libhamlib-dev libhamlib-utils build-essential cmake python3-libhamlib2
          python -m pip install --upgrade pip
          pip3 install pyaudio
          pip3 install psutil
          pip3 install crcengine
          pip3 install 'pyinstaller<5.1'
          pip3 install ujson
          pip3 install pyserial
          pip3 install numpy
          pip3 install structlog
          pip3 install sounddevice


      #- name: Build Hamlib Python Binding
      #  if: matrix.os == 'ubuntu-latest'
      #  working-directory: tnc
      #  run: |
      #    sudo apt install wig libtool
      #    cd ~
      #    git clone https://github.com/Hamlib/Hamlib.git
      #    cd Hamlib
      #    ./bootstrap
      #    ./configure --with-python-binding PYTHON_VERSION='3.9' --prefix=$HOME/local
      #    make
      #    make install




      - name: Build codec2 Linux
        if: matrix.os == 'ubuntu-20.04'
        working-directory: tnc
        run: |
          git clone https://github.com/drowe67/codec2.git
          cd codec2 && mkdir build_linux && cd build_linux
          cmake ../
          make


      - name: Build Linux Daemon
        if: matrix.os == 'ubuntu-20.04'
        working-directory: tnc
        run: |
          pyinstaller freedata.spec

      - name: LIST ALL FILES
        shell: bash
        run: |
          ls -R


      - name: Compress Linux
        shell: bash
        run: |
          cd ./tnc/dist
          mkdir compressed
          zip -r ./compressed/${{ matrix.zip_name }}.zip *

      - name: Upload Ubuntu TNC artifacts
        uses: actions/upload-artifact@v2
        with:
          name: tnc-artifact
          path: ./tnc/dist/compressed/*



      - name: Copy TNC to GUI Linux
        if: matrix.os == 'ubuntu-20.04'
        run: |
          cp -R ./tnc/dist/tnc ./gui/tnc
          ls -R

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v1
        with:
          node-version: 16

      - name: Release TNC
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          files: ./tnc/dist/compressed/${{ matrix.zip_name }}.zip

      - name: Build/release Electron app
        uses: samuelmeuli/action-electron-builder@v1
        with:
          package_root: "./gui/"
          github_token: ${{ secrets.github_token }}
          # If the commit is tagged with a version (e.g. "v1.0.0"),
          # release the app after building
          release: ${{ startsWith(github.ref, 'refs/tags/v') }}
          args: "-p always"



